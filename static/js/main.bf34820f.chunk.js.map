{"version":3,"sources":["components/Page/index.jsx","pages/HomePage/index.jsx","word.js","data.js","pages/IrregularVerbs/index.jsx","components/OutlinedInput/index.jsx","pages/Training/components/CheckVerbForm/index.jsx","pages/Training/components/FormSettings/index.jsx","pages/Training/index.jsx","pages/Training/helpers.js","App.js","serviceWorker.js","index.js"],"names":["Index","title","children","Grid","container","alignItems","justifyContent","HomePage","Page","Word","v1","t1","v2","t2","v3","t3","meaning","group","extended","this","irregularVerbs","useStyles","makeStyles","theme","helper","marginBottom","spacing","column","color","backgroundColor","palette","primary","main","t","VerbsTable","verbs","showTranscription","classes","Table","TableHead","TableRow","TableCell","className","TableBody","map","index","hover","verb","transcription","TranscriptionCell","IrregularVerbs","useState","setVerbs","searchBy","setSearchBy","withExtended","setWithExtended","setShowTranscription","useEffect","words","filter","includes","Card","CardContent","FormControl","fullWidth","FormControlLabel","control","Switch","checked","onChange","value","label","InputLabel","htmlFor","Input","id","type","target","item","Paper","OutlinedInput","errors","touched","name","labelRef","useRef","labelWidth","setLabelWidth","current","offsetWidth","variant","error","ref","field","component","FormHelperText","numberOfCards","Yup","args","message","test","path","createError","match","textField","marginLeft","marginRight","secondary","validationSchema","shape","isEnglish","required","initValues","initAttempt","success","fields","Object","keys","CheckVerbForm","word","handleOnSubmit","stop","attempt","setAttempt","initialValues","onSubmit","values","validateForm","setFieldError","setErrors","resetForm","errorsAfterCheck","newAttempt","forEach","key","newErrors","length","setTimeout","Typography","gutterBottom","CardActions","Button","onClick","defaultProps","FormSettings","settings","handleSubmit","setSettings","maxNumberOfCards","validate","count","Number","oneAttempt","defaultSettings","START","PROGRESS","FINISH","Training","status","setStatus","cards","setCards","setWords","step","setStep","start","itemsArray","numberOfItems","result","Array","isArray","Math","floor","random","push","getRandom","ProgressBlock","nextStep","next","FinishBlock","ButtonGroup","newSettings","link","display","padding","routeComponents","navName","App","to","exact","Boolean","window","location","hostname","createTheme","blue","red","green","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.bf34820f.chunk.js","sourcesContent":["import React from \"react\";\n// ui components\nimport Grid from '@material-ui/core/Grid';\n\nconst Index = ({title, children}) => {\n    return (\n        <Grid container>\n            <Grid container alignItems=\"center\" justifyContent=\"center\">\n                {title && <h1>{title}</h1>}\n            </Grid>\n            <Grid container>\n                {children}\n            </Grid>\n\n        </Grid>\n\n    );\n};\n\nexport default Index;\n","import React from \"react\";\n// components\nimport Page from \"../../components/Page\";\n\nconst HomePage = () => {\n    return <Page title=\"HomePage\"/>;\n};\n\nexport default HomePage\n","export class Word {\n    constructor(\n        v1 = '',\n        t1 = '',\n        v2 = '',\n        t2 = '',\n        v3 = '',\n        t3 = '',\n        meaning = '',\n        group = 1,\n        extended = false\n    ) {\n        this.group = group;\n        this.v1 = v1;\n        this.t1 = t1;\n        this.v2 = v2;\n        this.t2 = t2;\n        this.v3 = v3;\n        this.t3 = t3;\n        this.meaning = meaning;\n        this.extended = extended;\n    }\n}\n\nexport default Word;\n","import Word from './word'\n\nexport const irregularVerbs = [\n    new Word(\"be\", \"[bi]\", \"was, were\", \"[wɒz] [wɜː]\", \"been\", \"[biːn]\", \"быть\", 1),\n    new Word(\"bear\", \"[beə]\", \"bore\", \"[bɔː]\", \"born, borne\", \"[bɔːn] [bɔːn]\", \"нести, родить\", 1, true),\n    new Word(\"beat\", \"[biːt]\", \"beat\", \"[biːt]\", \"beaten\", \"[ˈbiːtən]\", \"бить\", 1),\n    new Word(\"become\", \"[bɪˈkʌm]\", \"became\", \"[bɪˈkeɪm]\", \"become\", \"[bɪˈkʌm]\", \"становиться\", 1),\n    new Word(\"begin\", \"[bɪˈɡɪn]\", \"began\", \"[bɪˈɡæn]\", \"begun\", \"[bɪˈɡʌn]\", \"начинаться\", 1),\n    new Word(\"bend\", \"[bend]\", \"bent\", \"[bent]\", \"bent\", \"[bent]\", \"гнуть\", 1, true),\n    new Word(\"bet\", \"[ˈbet]\", \"bet\", \"[ˈbet]\", \"bet\", \"[ˈbet]\", \"держать пари\", 1, true),\n    new Word(\"bind\", \"[baɪnd]\", \"bound\", \"[baʊnd]\", \"bound\", \"[baʊnd]\", \"связать\", 1, true),\n    new Word(\"bite\", \"[baɪt]\", \"bit\", \"[bɪt]\", \"bitten\", \"[ˈbɪtən]\", \"кусать\", 1, true),\n    new Word(\"bleed\", \"[bliːd]\", \"bled\", \"[bled]\", \"bled\", \"[bled]\", \"кровоточить\", 1, true),\n    new Word(\"blow\", \"[bləʊ]\", \"blew\", \"[bluː]\", \"blown\", \"[bləʊn]\", \"дуть\", 1),\n    new Word(\"break\", \"[breɪk]\", \"broke\", \"[brəʊk]\", \"broken\", \"[ˈbrəʊkən]\", \"ломать(ся)\", 1),\n    new Word(\"breed\", \"[briːd]\", \"bred\", \"[bred]\", \"bred\", \"[bred]\", \"выращивать, разводить\", 1, true),\n    new Word(\"bring\", \"[brɪŋ]\", \"brought\", \"[ˈbrɔːt]\", \"brought\", \"[ˈbrɔːt]\", \"приносить\", 1),\n    new Word(\"build\", \"[bɪld]\", \"built\", \"[bɪlt]\", \"built\", \"[bɪlt]\", \"строить\", 1),\n    new Word(\"burn\", \"[bɜːn]\", \"burnt\", \"[bɜːnt] [bɜːnd]\", \"burnt\", \"[bɜːnt] [bɜːnd]\", \"гореть, жечь\", 1),\n    new Word(\"burst\", \"[bɜːst]\", \"burst\", \"[bɜːst]\", \"burst\", \"[bɜːst]\", \"разразиться, взорваться\", 1, true),\n    new Word(\"buy\", \"[baɪ]\", \"bought\", \"[ˈbɔːt]\", \"bought\", \"[ˈbɔːt]\", \"покупать\", 1),\n    new Word(\"cast\", \"[kɑːst]\", \"cast\", \"[kɑːst]\", \"cast\", \"[kɑːst]\", \"кинуть, лить металл\", 1, true),\n    new Word(\"catch\", \"[kætʃ]\", \"caught\", \"[ˈkɔːt]\", \"caught\", \"[ˈkɔːt]\", \"ловить, хватать\", 1),\n    new Word(\"choose\", \"[tʃuːz]\", \"chose\", \"[tʃəʊz]\", \"chosen\", \"[ˈtʃəʊzən]\", \"выбирать\", 1),\n    new Word(\"come\", \"[kʌm]\", \"came\", \"[keɪm]\", \"come\", \"[kʌm]\", \"приходить\", 1),\n    new Word(\"cost\", \"[kɒst]\", \"cost\", \"[kɒst]\", \"cost\", \"[kɒst]\", \"стоить\", 1),\n    new Word(\"creep\", \"[kriːp]\", \"crept\", \"[krept]\", \"crept\", \"[krept]\", \"ползти\", 1, true),\n    new Word(\"cut\", \"[kʌt]\", \"cut\", \"[kʌt]\", \"cut\", \"[kʌt]\", \"резать\", 1),\n    new Word(\"deal\", \"[diːl]\", \"dealt\", \"[delt]\", \"dealt\", \"[delt]\", \"иметь дело\", 1, true),\n    new Word(\"dig\", \"[dɪɡ]\", \"dug\", \"[dʌɡ]\", \"dug\", \"[dʌɡ]\", \"копать\", 1, true),\n    new Word(\"do\", \"[duː]\", \"did\", \"[dɪd]\", \"done\", \"[dʌn]\", \"делать\", 1),\n    new Word(\"draw\", \"[drɔː]\", \"drew\", \"[druː]\", \"drawn\", \"[drɔːn]\", \"тащить, рисовать\", 1),\n    new Word(\"dream\", \"[driːm]\", \"dreamt, dreamed\", \"[dremt] [driːmd]\", \"dreamt, dreamed\", \"[dremt] [driːmd]\", \"грезить, мечтать\", 1, true),\n    new Word(\"drink\", \"[drɪŋk]\", \"drank\", \"[dræŋk]\", \"drunk\", \"[drʌŋk]\", \"пить\", 1),\n    new Word(\"drive\", \"[draɪv]\", \"drove\", \"[drəʊv]\", \"driven\", \"[ˈdrɪvən]\", \"везти, гнать\", 1),\n    new Word(\"dwell\", \"[dwel]\", \"dwelt\", \"[dwelt]\", \"dwelt\", \"[dwelt]\", \"обитать, задерживаться\", 1, true),\n    new Word(\"eat\", \"[iːt]\", \"ate\", \"[et]\", \"eaten\", \"[ˈiːtən]\", \"есть, кушать\", 1),\n    new Word(\"fall\", \"[fɔːl]\", \"fell\", \"[ fel]\", \"fallen\", \"[ ˈfɔːlən]\", \"падать\", 1),\n    new Word(\"feed\", \"[fiːd]\", \"fed\", \"[fed]\", \"fed\", \"[fed]\", \"кормить\", 1, true),\n    new Word(\"feel\", \"[fiːl]\", \"felt\", \"[felt]\", \"felt\", \"[felt]\", \"чувствовать\", 1),\n    new Word(\"fight\", \"[faɪt]\", \"fought\", \"[ˈfɔːt]\", \"fought\", \"[ˈfɔːt]\", \"бороться, сражаться\", 1),\n    new Word(\"find\", \"[faɪnd]\", \"found\", \"[faʊnd]\", \"found\", \"[faʊnd]\", \"находить\", 1),\n    new Word(\"flee\", \"[fliː]\", \"fled\", \"[fled]\", \"fled\", \"[fled]\", \"бежать, спасаться\", 1, true),\n    new Word(\"fly\", \"[flaɪ]\", \"flew\", \"[fluː]\", \"flown\", \"[fləʊn]\", \"летать\", 1),\n    new Word(\"forbid\", \"[fəˈbɪd]\", \"forbad, forbade\", \"[fəˈbæd] [fəˈbæd]\", \"forbidden\", \"[fəˈbɪdən]\", \"запретить\", 1, true),\n    new Word(\"foresee\", \"[fɔːˈsiː]\", \"foresaw\", \"[fɔːˈsɔː]\", \"foreseen\", \"[fɔːˈsiːn]\", \"предвидеть\", 1, true),\n    new Word(\"foretell\", \"[fɔːˈtel]\", \"foretold\", \"[fɔːˈtəʊld]\", \"foretold\", \"[fɔːˈtəʊld]\", \"предсказывать\", 1, true),\n    new Word(\"forget\", \"[fəˈɡet]\", \"forgot\", \"[fəˈɡɒt]\", \"forgotten\", \"[fəˈɡɒtən]\", \"забывать\", 1),\n    new Word(\"forgive\", \"[fəˈɡɪv]\", \"forgave\", \"[fəˈɡeɪv]\", \"forgiven\", \"[fəˈɡɪvən]\", \"прощать\", 1),\n    new Word(\"freeze\", \"[friːz]\", \"froze\", \"[frəʊz]\", \"frozen\", \"[ˈfrəʊzən]\", \"замораживать\", 1),\n    new Word(\"get\", \"[ˈɡet]\", \"got\", \"[ˈɡɒt]\", \"got\", \"[ˈɡɒt]\", \"получатьж становиться, делаться\", 1),\n    new Word(\"give\", \"[ɡɪv]\", \"gave\", \"[ɡeɪv]\", \"given\", \"[ɡɪvən]\", \"давать\", 1),\n    new Word(\"go\", \"[ɡəʊ]\", \"went\", \"[ˈwent]\", \"gone\", \"[ɡɒn]\", \"идти, ходить\", 1),\n    new Word(\"grind\", \"[ɡraɪnd]\", \"ground\", \"[ɡraʊnd]\", \"ground\", \"[ɡraʊnd]\", \"точить, молоть\", 2, true),\n    new Word(\"grow\", \"[ɡrəʊ]\", \"grew\", \"[ɡruː]\", \"grown\", \"[ɡrəʊn]\", \"расти; становиться\", 2),\n    new Word(\"hang\", \"[hæŋ]\", \"hung, hanged\", \"[hʌŋ] [hæŋd]\", \"hung, hanged\", \"[hʌŋ] [hæŋd]\", \"висеть, повесить\", 2),\n    new Word(\"have\", \"[hæv]\", \"had\", \"[hæd]\", \"had\", \"[hæd]\", \"иметь\", 2),\n    new Word(\"hear\", \"[hɪə]\", \"heard\", \"[hɜːd]\", \"heard\", \"[hɜːd]\", \"слушать\", 2),\n    new Word(\"hide\", \"[haɪd]\", \"hid\", \"[hɪd]\", \"hidden\", \"[ˈhɪdən]\", \"прятать(ся)\", 2, true),\n    new Word(\"hit\", \"[hɪt]\", \"hit\", \"[hɪt]\", \"hit\", \"[hɪt]\", \"ударить, попасть\", 2),\n    new Word(\"hold\", \"[həʊld]\", \"held\", \"[held]\", \"held\", \"[held]\", \"держать\", 2),\n    new Word(\"hurt\", \"[hɜːt]\", \"hurt\", \"[hɜːt]\", \"hurt\", \"[hɜːt]\", \"причинить боль\", 2, true),\n    new Word(\"keep\", \"[kiːp]\", \"kept\", \"[kept]\", \"kept\", \"[kept]\", \"хранить\", 2),\n    new Word(\"know\", \"[nəʊ]\", \"knew\", \"[njuː]\", \"known\", \"[nəʊn]\", \"знать\", 2),\n    new Word(\"lay\", \"[leɪ]\", \"laid\", \"[leɪd]\", \"laid\", \"[leɪd]\", \"класть, положить\", 2),\n    new Word(\"lead\", \"[liːd]\", \"led\", \"[led]\", \"led\", \"[led]\", \"вести\", 2),\n    new Word(\"learn\", \"[lɜːn]\", \"learnt, learned\", \"[lɜːnt] [lɜːnd]\", \"learnt, learned\", \"[lɜːnt] [lɜːnd]\", \"учить\", 2, true),\n    new Word(\"leave\", \"[liːv]\", \"left\", \"[left]\", \"left\", \"[left]\", \"оставить, покидать\", 2),\n    new Word(\"lend\", \"[lend]\", \"lent\", \"[lent]\", \"lent\", \"[lent]\", \"давать взаймы, одолжить\", 2),\n    new Word(\"let\", \"[let]\", \"let\", \"[ let]\", \"let\", \"[ let]\", \"позволять, отдавать внаем, пустить, дать\", 2),\n    new Word(\"lie\", \"[laɪ]\", \"lay\", \"[leɪ]\", \"lain\", \"[leɪn]\", \"лежать\", 2),\n    new Word(\"light\", \"[laɪt]\", \"lit, lighted\", \"[lɪt] [ˈlaɪtɪd]\", \"lit, lighted\", \"[lɪt] [ˈlaɪtɪd]\", \"зажигать, осветить\", 2),\n    new Word(\"lose\", \"[luːz]\", \"lost\", \"[lɒst]\", \"lost\", \"[lɒst]\", \"терять\", 2),\n    new Word(\"make\", \"[ˈmeɪk]\", \"made\", \"[ˈmeɪd]\", \"made\", \"[ˈmeɪd]\", \"делать\", 2),\n    new Word(\"mean\", \"[miːn]\", \"meant\", \"[ment]\", \"meant\", \"[ment]\", \"значить, подразумевать\", 2),\n    new Word(\"meet\", \"[miːt]\", \"met\", \"[met]\", \"met\", \"[met]\", \"встретить\", 2),\n    new Word(\"mistake\", \"[mɪˈsteɪk]\", \"mistook\", \"[mɪˈstʊk]\", \"mistaken\", \"[mɪˈsteɪkən]\", \"неправильно понимать\", 2, true),\n    new Word(\"misunderstand\", \"[ˌmɪsˌʌndəˈstænd]\", \"misunderstood\", \"[ˌmɪsˌʌndəˈstʊd]\", \"misunderstood\", \"[ˌmɪsˌʌndəˈstʊd]\", \"неправильно понимать\", 2, true),\n    new Word(\"overcome\", \"[ˌəʊvəˈkʌm]\", \"overcame\", \"[ˌəʊvəˈkeɪm]\", \"overcome\", \"[ˌəʊvəˈkʌm]\", \"преодолевать\", 2, true),\n    new Word(\"pay\", \"[peɪ]\", \"paid\", \"[peɪd]\", \"paid\", \"[peɪd]\", \"платить\", 2),\n    new Word(\"put\", \"[ˈpʊt]\", \"put\", \"[ˈpʊt]\", \"put\", \"[ˈpʊt]\", \"класть\", 2),\n    new Word(\"read\", \"[riːd]\", \"read\", \"[red]\", \"read\", \"[red]\", \"читать\", 2),\n    new Word(\"ride\", \"[raɪd]\", \"rode\", \"[rəʊd]\", \"ridden\", \"[ˈrɪdən]\", \"ездить верхом\", 2),\n    new Word(\"retell\", \"[ˌriːˈtel]\", \"retold\", \"[ˌriːˈtəʊld]\", \"retold\", \"[ˌriːˈtəʊld]\", \"пересказывать\", 2),\n    new Word(\"ring\", \"[rɪŋ]\", \"rang\", \"[ræŋ]\", \"rung\", \"[rʌŋ]\", \"звонить\", 2),\n    new Word(\"rise\", \"[raɪz]\", \"rose\", \"[rəʊz]\", \"risen\", \"[ˈrɪzən]\", \"подниматься, подняться\", 2),\n    new Word(\"run\", \"[rʌn]\", \"ran\", \"[ræn]\", \"run\", \"[rʌn]\", \"бежать, течь\", 2),\n    new Word(\"saw\", \"[ˈsɔː]\", \"sawed\", \"[ˈsɔːd]\", \"sawn, sawed\", \"[sɔːn] [ˈsɔːd]\", \"пилить\", 2, true),\n    new Word(\"say\", \"[ˈseɪ]\", \"said\", \"[ˈsed]\", \"said\", \"[ˈsed]\", \"говорить, сказать\", 2),\n    new Word(\"see\", \"[ˈsiː]\", \"saw\", \"[ˈsɔː]\", \"seen\", \"[ˈsiːn]\", \"видеть\", 2),\n    new Word(\"seek\", \"[siːk]\", \"sought\", \"[ˈsɔːt]\", \"sought\", \"[ˈsɔːt]\", \"искать\", 2, true),\n    new Word(\"sell\", \"[sel]\", \"sold\", \"[səʊld]\", \"sold\", \"[səʊld]\", \"продавать\", 2),\n    new Word(\"send\", \"[send]\", \"sent\", \"[sent]\", \"sent\", \"[sent]\", \"послать, посылать\", 2),\n    new Word(\"set\", \"[set]\", \"set\", \"[set]\", \"set\", \"[set]\", \"устанавливать, помещать, заходить (о солнце)\", 2),\n    new Word(\"sew\", \"[səʊ]\", \"sewed\", \"[səʊd]\", \"sewed, sewn\", \"[səʊd] [səʊn]\", \"шить\", 2, true),\n    new Word(\"shake\", \"[ʃeɪk]\", \"shook\", \"[ʃʊk]\", \"shaken\", \"[ˈʃeɪkən]\", \"трясти\", 3),\n    new Word(\"shine\", \"[ʃaɪn]\", \"shone, shined\", \"[ʃɒn] [ʃaɪnd]\", \"shone, shined\", \"[ʃɒn] [ʃaɪnd]\", \"светить, сиять, блестеть\", 3),\n    new Word(\"shoot\", \"[ʃuːt]\", \"shot\", \"[ʃɒt]\", \"shot\", \"[ʃɒt]\", \"стрелять, давать побеги\", 3),\n    new Word(\"show\", \"[ʃəʊ]\", \"showed\", \"[ʃəʊd]\", \"shown, showed\", \"[ʃəʊn] ʃəʊd]\", \"показывать\", 3, true),\n    new Word(\"shrink\", \"[ʃrɪŋk]\", \"shrank\", \"[ʃræŋk]\", \"shrunk\", \"[ʃrʌŋk]\", \"сокращаться, сжиматься\", 3, true),\n    new Word(\"shut\", \"[ʃʌt]\", \"shut\", \"[ʃʌt]\", \"shut\", \"[ʃʌt]\", \"закрывать\", 3),\n    new Word(\"sing\", \"[sɪŋ]\", \"sang\", \"[ sæŋ]\", \"sung\", \"[ sʌŋ]\", \"петь\", 3),\n    new Word(\"sink\", \"[sɪŋk]\", \"sank\", \"[sæŋk]\", \"sunk\", \"[sʌŋk]\", \"тонуть\", 3, true),\n    new Word(\"sit\", \"[sɪt]\", \"sat\", \"[sæt]\", \"sat\", \"[sæt]\", \"сидеть\", 3),\n    new Word(\"slay\", \"[sleɪ]\", \"slew\", \"[sluː]\", \"slain\", \"[sleɪn]\", \"убивать\", 3, true),\n    new Word(\"sleep\", \"[sliːp]\", \"slept\", \"[slept]\", \"slept\", \"[slept]\", \"спать\", 3),\n    new Word(\"slide\", \"[slaɪd]\", \"slid\", \"[slɪd]\", \"slid\", \"[slɪd]\", \"скользить\", 3, true),\n    new Word(\"smell\", \"[smel]\", \"smelt, smelled\", \"[smelt] [smeld]\", \"smelt, smelled\", \"[smelt] [smeld]\", \"пахнуть, нюхать\", 3, true),\n    new Word(\"speak\", \"[spiːk]\", \"spoke\", \"[spəʊk]\", \"spoken\", \"[ˈspəʊkən]\", \"говорить\", 3),\n    new Word(\"spend\", \"[spend]\", \"spent\", \"[spent]\", \"spent\", \"[spent]\", \"тратить, проводить\", 3),\n    new Word(\"spit\", \"[spɪt]\", \"spat, spit\", \"[spæt] [spɪt]\", \"spat, spit\", \"[spæt] [spɪt]\", \"плевать\", 3, true),\n    new Word(\"split\", \"[splɪt]\", \"split\", \"[splɪt]\", \"split\", \"[splɪt]\", \"расщепить\", 3, true),\n    new Word(\"spread\", \"[spred]\", \"spread\", \"[spred]\", \"spread\", \"[spred]\", \"распространяться, распространять\", 3),\n    new Word(\"spring\", \"[sprɪŋ]\", \"sprang\", \"[spræŋ]\", \"sprung\", \"[sprʌŋ]\", \"скакать, пружинить\", 3, true),\n    new Word(\"stand\", \"[stænd]\", \"stood\", \"[stʊd]\", \"stood\", \"[stʊd]\", \"стоять\", 3),\n    new Word(\"steal\", \"[stiːl]\", \"stole\", \"[stəʊl]\", \"stolen\", \"[ˈstəʊlən]\", \"украсть\", 3, true),\n    new Word(\"stick\", \"[stɪk]\", \"stuck\", \"[stʌk]\", \"stuck\", \"[stʌk]\", \"уколоть, приклеить, втыкать\", 3),\n    new Word(\"sting\", \"[stɪŋ]\", \"stung\", \"[stʌɡ]\", \"stung\", \"[stʌɡ]\", \"ужалить\", 3, true),\n    new Word(\"stink\", \"[stɪŋk]\", \"stank, stunk\", \"[stæŋk] [stʌŋk]\", \"stunk\", \"[stʌŋk]\", \"вонять\", 3, true),\n    new Word(\"strike\", \"[straɪk]\", \"struck\", \"[strʌk]\", \"struck\", \"[strʌk]\", \"ударить, бить, бастовать, ударять\", 3),\n    new Word(\"strive\", \"[straɪv]\", \"strove\", \"[strəʊv]\", \"striven\", \"[ˈstrɪvən]\", \"стараться\", 3, true),\n    new Word(\"swear\", \"[sweə]\", \"swore\", \"[swɔː]\", \"sworn\", \"[swɔːn]\", \"клясться, браниться\", 3, true),\n    new Word(\"sweep\", \"[swiːp]\", \"swept\", \"[swept]\", \"swept\", \"[swept]\", \"мести, промчаться\", 3),\n    new Word(\"swim\", \"[swɪm]\", \"swam\", \"[swæm]\", \"swum\", \"[swʌm]\", \"плыть, плавать\", 3),\n    new Word(\"swing\", \"[swɪŋ]\", \"swung\", \"[swʌŋ]\", \"swung\", \"[swʌŋ]\", \"качаться\", 3, true),\n    new Word(\"take\", \"[teɪk]\", \"took\", \"[tʊk]\", \"taken\", \"[ˈteɪkən]\", \"взять, брать\", 3),\n    new Word(\"teach\", \"[tiːtʃ]\", \"taught\", \"[tɔːt]\", \"taught\", \"[tɔːt]\", \"обучать, учить\", 3),\n    new Word(\"tear\", \"[ˈteə]\", \"tore\", \"[ˈtɔː]\", \"torn\", \"[ˈtɔːn]\", \"рвать\", 3, true),\n    new Word(\"tell\", \"[tel]\", \"told\", \"[təʊld]\", \"told\", \"[təʊld]\", \"рассказывать, сказать\", 3),\n    new Word(\"think\", \"[ˈθɪŋk]\", \"thought\", \"[ˈθɔːt]\", \"thought\", \"[ˈθɔːt]\", \"думать\", 3),\n    new Word(\"throw\", \"[ˈθrəʊ]\", \"threw\", \"[θruː]\", \"thrown\", \"[ˈθrəʊn]\", \"бросить, бросать\", 3),\n    new Word(\"tread\", \"[tred]\", \"trod\", \"[trɒd]\", \"trod, trodden\", \"[trɒd] [ˈtrɒdən]\", \"ступать\", 3, true),\n    new Word(\"understand\", \"[ˌʌndəˈstænd]\", \"understood\", \"[ˌʌndəˈstʊd]\", \"understood\", \"[ˌʌndəˈstʊd]\", \"понимать\", 3),\n    new Word(\"wake\", \"[ weɪk]\", \"woke, waked\", \"[wəʊk] [weɪkt]\", \"woken, waked\", \"[ˈwəʊkən] [weɪkt]\", \"просыпаться, будить\", 3),\n    new Word(\"wear\", \"[weə]\", \"wore\", \"[wɔː]\", \"worn\", \"[wɔːn]\", \"носить (одежду)\", 3),\n    new Word(\"weep\", \"[wiːp]\", \"wept\", \"[wept]\", \"wept\", \"[wept]\", \"плакать\", 3),\n    new Word(\"wet\", \"[wet]\", \"wet, wetted\", \"[wet] [ˈwetɪd]\", \"wet, wetted\", \"[wet] [ˈwetɪd]\", \"мочить, увлажнять\", 3, true),\n    new Word(\"win\", \"[wɪn]\", \"won\", \"[wʌn]\", \"won\", \"[wʌn]\", \"выиграть, выигрывать, побеждать\", 3),\n    new Word(\"wind\", \"[waɪnd]\", \"wound\", \"[waund]\", \"wound\", \"[waund]\", \"заводить (механизм)\", 3, true),\n    new Word(\"withdraw\", \"[wɪðˈdrɔː]\", \"withdrew\", \"[wɪðˈdruː]\", \"withdrawn\", \"[wɪðˈdrɔːn]\", \"взять назад, отозвать\", 3, true),\n    new Word(\"withstand\", \"[wɪðˈstænd]\", \"withstood\", \"[wɪðˈstʊd]\", \"withstood\", \"[wɪðˈstʊd]\", \"противиться\", 3, true),\n    new Word(\"write\", \"[ˈraɪt]\", \"wrote\", \"[rəʊt]\", \"written\", \"[ˈrɪtən]\", \"писать\", 3),\n];\n","import React, {useState, useEffect} from \"react\";\nimport {makeStyles} from '@material-ui/core/styles';\n// components\nimport Page from \"../../components/Page\";\nimport {irregularVerbs} from \"../../data\";\n// ui components\nimport Grid from '@material-ui/core/Grid';\nimport Paper from '@material-ui/core/Paper';\nimport Table from '@material-ui/core/Table';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableRow from '@material-ui/core/TableRow';\nimport TableCell from '@material-ui/core/TableCell';\nimport FormControl from '@material-ui/core/FormControl';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport Card from '@material-ui/core/Card';\nimport CardContent from '@material-ui/core/CardContent';\nimport Switch from '@material-ui/core/Switch';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport Input from '@material-ui/core/Input';\n\nconst useStyles = makeStyles(theme => ({\n    helper: {\n        marginBottom: theme.spacing(3),\n    },\n    column: {\n        color: 'white',\n        backgroundColor: theme.palette.primary.main,\n    },\n    t: {\n        color: 'gray'\n    }\n}));\n\nconst VerbsTable = ({verbs = [], showTranscription}) => {\n    const classes = useStyles();\n    return (\n        <Table>\n            <TableHead>\n                <TableRow>\n                    <TableCell className={classes.column}>#</TableCell>\n                    <TableCell className={classes.column}>Form 1</TableCell>\n                    <TableCell className={classes.column}>Form 2</TableCell>\n                    <TableCell className={classes.column}>Form 3</TableCell>\n                    <TableCell className={classes.column}>Meaning</TableCell>\n                </TableRow>\n            </TableHead>\n            <TableBody>\n                {verbs.map(\n                    ({v1, t1, v2, t2, v3, t3, meaning}, index) => (\n                        <TableRow key={v1} hover>\n                            <TableCell>{index + 1}</TableCell>\n                            <TranscriptionCell\n                                verb={v1}\n                                transcription={t1}\n                                showTranscription={showTranscription}/>\n                            <TranscriptionCell\n                                verb={v2}\n                                transcription={t2}\n                                showTranscription={showTranscription}/>\n                            <TranscriptionCell\n                                verb={v3}\n                                transcription={t3}\n                                showTranscription={showTranscription}/>\n                            <TableCell>{meaning}</TableCell>\n                        </TableRow>\n                    )\n                )}\n            </TableBody>\n        </Table>\n    );\n};\n\nconst TranscriptionCell = ({verb = '', transcription = '', showTranscription}) => {\n    const classes = useStyles();\n    return (\n        <TableCell>\n            <span>{verb}</span>\n            {showTranscription && <span className={classes.t}> {transcription}</span>}\n        </TableCell>\n    );\n};\n\n\nconst IrregularVerbs = () => {\n    const classes = useStyles();\n    const [verbs, setVerbs] = useState(irregularVerbs);\n    const [searchBy, setSearchBy] = useState('');\n    const [withExtended, setWithExtended] = useState(false);\n    const [showTranscription, setShowTranscription] = useState(true);\n\n    useEffect(() => {\n        let words = irregularVerbs;\n        if (!withExtended) {\n            words = words.filter(({extended}) => !extended);\n        }\n        if (searchBy) {\n            words = words.filter(({v1, v2, v3, meaning}) => (\n                v1.includes(searchBy) || v2.includes(searchBy) || v3.includes(searchBy) || meaning.includes(searchBy)\n            ));\n        }\n        setVerbs(words)\n    }, [withExtended, searchBy]);\n\n    const searchChangeHandler = ({target: {value} = {value: ''}}) => {\n        setSearchBy(value)\n    };\n\n    return (\n        <Page title=\"Irregular Verbs\">\n            <Grid container alignItems=\"center\" justifyContent=\"center\">\n                <Card className={classes.helper}>\n                    <CardContent>\n                        <FormControl fullWidth>\n                            <FormControlLabel\n                                control={\n                                    <Switch\n                                        checked={withExtended}\n                                        onChange={() => setWithExtended(!withExtended)}\n                                        value=\"extended\"\n                                        color=\"primary\"\n                                    />\n                                }\n                                label=\"With Extended\"\n                            />\n                        </FormControl>\n                        <FormControl fullWidth>\n                            <FormControlLabel\n                                control={\n                                    <Switch\n                                        checked={showTranscription}\n                                        onChange={() => setShowTranscription(!showTranscription)}\n                                        value=\"extended\"\n                                        color=\"primary\"\n                                    />\n                                }\n                                label=\"Show Transcription\"\n                            />\n                        </FormControl>\n                        <FormControl fullWidth>\n                            <InputLabel htmlFor=\"search\">search</InputLabel>\n                            <Input id=\"search\" type=\"search\" onChange={searchChangeHandler}/>\n                        </FormControl>\n                    </CardContent>\n                </Card>\n            </Grid>\n            <Grid container alignItems=\"center\" justifyContent=\"center\" spacing={1}>\n                <Grid item>\n                    <Paper>\n                        <VerbsTable verbs={verbs} showTranscription/>\n                    </Paper>\n                </Grid>\n            </Grid>\n        </Page>\n    );\n};\n\nexport default IrregularVerbs\n","import React, {useState, useRef, useEffect} from 'react';\nimport {ErrorMessage, Field} from \"formik\";\n// ui components\nimport FormControl from '@material-ui/core/FormControl';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport {default as UIOutlinedInput} from '@material-ui/core/OutlinedInput';\nimport FormHelperText from \"@material-ui/core/FormHelperText\";\n\nconst OutlinedInput = ({errors, touched, name, label, fullWidth, className}) => {\n    const labelRef = useRef(null);\n    const [labelWidth, setLabelWidth] = useState(0);\n    useEffect(() => {\n        setLabelWidth(labelRef.current.offsetWidth)\n    }, [labelRef]);\n    return (\n        <FormControl fullWidth={fullWidth}\n                     variant=\"outlined\"\n                     error={errors[name] && touched[name]}\n                     className={className}>\n            <InputLabel htmlFor={name} ref={labelRef}>{label}</InputLabel>\n            <Field id={name} name={name}>\n                {({field}) => (<UIOutlinedInput {...field} labelWidth={labelWidth}/>)}\n            </Field>\n\n            <ErrorMessage name={name} component={FormHelperText}\n                          error={errors.numberOfCards && touched.numberOfCards}/>\n        </FormControl>\n    );\n};\n\nexport default OutlinedInput\n","import React, {useState} from \"react\";\n// libs\nimport {Formik, Form} from \"formik\";\nimport * as Yup from \"yup\";\nimport {makeStyles} from '@material-ui/core/styles';\n// ui components\nimport Card from '@material-ui/core/Card';\nimport CardActions from '@material-ui/core/CardActions';\nimport CardContent from '@material-ui/core/CardContent';\nimport Typography from '@material-ui/core/Typography';\nimport Button from '@material-ui/core/Button';\nimport OutlinedInput from '../../../../components/OutlinedInput'\n\nconst defaultMessage = 'use only alphabet of english';\n\nYup.addMethod(Yup.string, \"isEnglish\", function (args) {\n    const {message} = args;\n    return Yup.mixed().test(`isEnglish`, message, function (value) {\n        const {path, createError} = this;\n        const {message = defaultMessage} = args;\n        return value ? value.match(/^[A-Za-z]*$/) || createError({path, message}) : true;\n    })\n});\n\nconst useStyles = makeStyles(theme => ({\n    textField: {\n        marginLeft: theme.spacing(1),\n        marginRight: theme.spacing(1),\n    },\n    message: {\n        marginLeft: theme.spacing(1),\n        marginRight: theme.spacing(1),\n        '&.error': {\n            color: theme.palette.secondary.main\n        },\n        '&.success': {\n            color: theme.palette.primary.main\n        }\n    },\n}));\n\nconst validationSchema = Yup.object().shape({\n    v1: Yup.string().isEnglish('').required(),\n    v2: Yup.string().isEnglish('').required(),\n    v3: Yup.string().isEnglish('').required()\n});\n\nconst initValues = {\n    v1: \"\",\n    v2: \"\",\n    v3: \"\",\n};\n\nconst initAttempt = {\n    message: '',\n    errors: {},\n    success: {}\n};\n\nconst fields = Object.keys(initValues);\n\nconst CheckVerbForm = ({word, handleOnSubmit, stop}) => {\n    const {meaning} = word;\n    const [attempt, setAttempt] = useState(initAttempt);\n    const classes = useStyles();\n    return (\n        <Formik\n            initialValues={initValues}\n            validationSchema={validationSchema}\n            onSubmit={(values, {validateForm, setFieldError, setErrors, resetForm}) => {\n                setAttempt(initAttempt);\n                const errorsAfterCheck = {};\n                const newAttempt = {\n                    errors: {},\n                    success: {},\n                    message: ''\n                };\n\n\n                Object.keys(values).forEach(key => {\n                    if (word[key] !== values[key]) {\n                        errorsAfterCheck[key] = 'Wrong verb form';\n                        newAttempt.errors[key] = true\n                    } else {\n                        newAttempt.success[key] = true\n                    }\n                });\n\n                const newErrors = Object.keys(errorsAfterCheck).length > 0;\n\n                newAttempt.message = newErrors ? \"You`re wrong: please, check highlighted fields\" : \"You`re right!\";\n                setAttempt(newAttempt);\n                if (newErrors) {\n                    setErrors(errorsAfterCheck);\n                } else {\n                    setTimeout(() => {\n                        setAttempt(initAttempt);\n                        resetForm();\n                        handleOnSubmit()\n                    }, 800)\n                }\n            }}\n        >\n            {({errors, touched}) => (\n                <Form>\n                    <Card>\n                        <CardContent>\n                            <Typography gutterBottom variant=\"subtitle1\"\n                                        className={`${classes.message} ${Object.keys(attempt.errors).length > 0 ? 'error' : 'success'}`}>\n                                {attempt.message}\n                            </Typography>\n                            <Typography gutterBottom variant=\"h4\" component=\"h2\" color=\"primary\">\n                                {meaning}\n                            </Typography>\n                            {fields.map((name, index) => (\n                                <OutlinedInput key={name} errors={errors} touched={touched} name={name}\n                                               label={`V${index + 1}`}\n                                               className={classes.textField}/>\n                            ))}\n                        </CardContent>\n                        <CardActions>\n                            <Button variant=\"contained\" color=\"primary\" type=\"submit\">Next</Button>\n                            <Button color=\"secondary\" onClick={stop} >Stop Training</Button>\n                        </CardActions>\n                    </Card>\n                </Form>\n            )}\n\n        </Formik>\n    );\n};\n\nCheckVerbForm.defaultProps = {\n    word: {\n        meaning: ''\n    },\n    handleOnSubmit: () => {\n    },\n    stop: () => {\n    }\n};\n\nexport default CheckVerbForm;\n","import React from 'react';\nimport {Formik, Form} from \"formik\";\n// ui components\nimport Card from '@material-ui/core/Card';\nimport CardActions from '@material-ui/core/CardActions';\nimport CardContent from '@material-ui/core/CardContent';\nimport Typography from '@material-ui/core/Typography';\nimport FormControl from '@material-ui/core/FormControl';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport Switch from '@material-ui/core/Switch';\nimport Button from '@material-ui/core/Button';\nimport OutlinedInput from '../../../../components/OutlinedInput'\n\n\nconst FormSettings = ({settings, handleSubmit, setSettings, maxNumberOfCards = 0}) => {\n    return (\n        <Formik\n            initialValues={settings}\n            validate={(values) => {\n                const errors = {};\n                const count = values.numberOfCards;\n                if (!count) {\n                    errors.numberOfCards = 'is required'\n                } else if (count && typeof count === \"string\" && !count.match(/^[0-9]*$/)) {\n                    errors.numberOfCards = 'accept only numbers'\n                } else if (count && count <= 0) {\n                    errors.numberOfCards = `minimum number is 1`\n                } else if (count && count > maxNumberOfCards) {\n                    errors.numberOfCards = `maximum number is ${maxNumberOfCards}`\n                }\n                return errors\n            }}\n            onSubmit={(values) => {\n                values.numberOfCards = Number(values.numberOfCards);\n                handleSubmit(values)\n            }}\n        >\n            {({errors, touched}) => (\n                <Form>\n                    <Card>\n                        <CardContent>\n                            <Typography gutterBottom variant=\"h5\" component=\"h2\">\n                                Setup settings\n                            </Typography>\n                            <FormControl fullWidth>\n                                <FormControlLabel\n                                    control={\n                                        <Switch\n                                            checked={settings.withExtended}\n                                            onChange={({target: {checked: withExtended}}) => {\n                                                setSettings({...settings, withExtended})\n                                            }}\n                                            value=\"withExtended\"\n                                            color=\"primary\"\n                                        />\n                                    }\n                                    label=\"With Extended\"\n                                />\n                            </FormControl>\n\n                            <FormControl fullWidth>\n                                <FormControlLabel\n                                    control={\n                                        <Switch\n                                            checked={settings.oneAttempt}\n                                            onChange={({target: {checked: oneAttempt}}) => {\n                                                setSettings({...settings, oneAttempt})\n                                            }}\n                                            value=\"oneAttempt\"\n                                            color=\"primary\"\n                                        />\n                                    }\n                                    label=\"One Attempt\"\n                                />\n                            </FormControl>\n                            <OutlinedInput errors={errors} touched={touched} name=\"numberOfCards\"\n                                           label=\"Number of Cards\"\n                                           fullWidth/>\n                        </CardContent>\n                        <CardActions>\n                            <Button variant=\"contained\" color=\"primary\" type=\"submit\">start</Button>\n                        </CardActions>\n                    </Card>\n\n\n                </Form>\n            )}\n        </Formik>\n\n    );\n};\n\nexport default FormSettings;","import React, {useState, useEffect} from \"react\";\n//components\nimport Page from \"../../components/Page\";\nimport CheckVerbForm from \"./components/CheckVerbForm\";\nimport FormSettings from './components/FormSettings'\n// ui components\nimport Grid from '@material-ui/core/Grid';\nimport Card from '@material-ui/core/Card';\nimport CardActions from '@material-ui/core/CardActions';\nimport CardContent from '@material-ui/core/CardContent';\nimport Typography from '@material-ui/core/Typography';\nimport FormControl from '@material-ui/core/FormControl';\nimport ButtonGroup from '@material-ui/core/ButtonGroup';\nimport Button from '@material-ui/core/Button';\n\n// others\nimport {irregularVerbs} from \"../../data\";\nimport {getRandom} from \"./helpers\";\n\n\nconst defaultSettings = {\n    withExtended: true,\n    oneAttempt: false,\n    numberOfCards: 10,\n};\n\n// statuses\nconst START = 'start';\nconst PROGRESS = 'progress';\nconst FINISH = 'finish';\n\nconst Training = () => {\n    const [status, setStatus] = useState(START);\n    const [settings, setSettings] = useState(defaultSettings);\n    const [cards, setCards] = useState([]);\n    const [words, setWords] = useState(irregularVerbs);\n    const [step, setStep] = useState(0);\n\n    const {withExtended, numberOfCards} = settings;\n\n    useEffect(() => {\n        setWords(withExtended ? irregularVerbs : irregularVerbs.filter(({extended}) => !extended))\n    }, [withExtended]);\n\n    const start = (numberOfCards) => {\n        setCards(getRandom(words, numberOfCards));\n        setStep(0);\n        setStatus(PROGRESS);\n    };\n\n    const finish = () => {\n        setStatus(FINISH);\n    };\n\n    const next = () => {\n        const nextStep = step + 1;\n        setStep(nextStep);\n        if (nextStep === numberOfCards) {\n            setStatus(FINISH);\n        }\n    };\n\n    const ProgressBlock = (\n        <div>\n            <h6>{step + 1}/{numberOfCards}</h6>\n            <CheckVerbForm\n                handleOnSubmit={() => {\n                    next()\n                }}\n                word={cards[step]}\n                stop={finish}/>\n        </div>\n    );\n\n    const FinishBlock = (\n        <Card>\n            <CardContent>\n                <Typography gutterBottom variant=\"h5\" component=\"h2\">\n                    Your results\n                </Typography>\n            </CardContent>\n            <CardActions>\n                <FormControl>\n                    <ButtonGroup variant=\"contained\" color=\"primary\">\n                        <Button\n                            onClick={() => {\n                                setStatus(START);\n                            }}>Repeat\n                        </Button>\n                        <Button\n                            onClick={() => {\n                                setStatus(START);\n                                setSettings(defaultSettings);\n                            }}>Go to Settings\n                        </Button>\n                    </ButtonGroup>\n                </FormControl>\n            </CardActions>\n\n        </Card>\n    );\n\n    return (\n        <Page title=\"Training\">\n            <Grid container alignItems=\"center\" justifyContent=\"center\">\n                {status === START && <FormSettings\n                    settings={settings}\n                    maxNumberOfCards={words.length}\n                    setSettings={(newSettings) => {\n                        setSettings(newSettings)\n                    }}\n                    handleSubmit={(values) => {\n                        setSettings(values);\n                        start(values.numberOfCards);\n\n                    }}/>}\n                {status === PROGRESS && ProgressBlock}\n                {status === FINISH && FinishBlock}\n            </Grid>\n        </Page>\n    );\n};\n\nexport default Training\n","export const getRandom = (itemsArray, numberOfItems) => {\n    let result = [];\n    if (Array.isArray(itemsArray) && numberOfItems <= itemsArray.length) {\n        do {\n            const randomIndex = Math.floor(Math.random() * itemsArray.length);\n            const item = itemsArray[randomIndex];\n            if (!result.includes(item)) {\n                result.push(item);\n            }\n        } while (result.length < numberOfItems)\n\n    }\n    return result\n};","import React from \"react\";\nimport \"./App.css\";\nimport {Route, Link} from \"react-router-dom\";\nimport {makeStyles} from '@material-ui/core/styles';\n// components\nimport HomePage from \"./pages/HomePage\";\nimport IrregularVerbs from \"./pages/IrregularVerbs\";\nimport Training from \"./pages/Training\";\n// ui components\nimport Paper from '@material-ui/core/Paper';\nimport Button from '@material-ui/core/Button';\n\nconst useStyles = makeStyles(theme => ({\n    link: {\n        display: 'inline-block',\n        padding: theme.spacing(1),\n\n    },\n}));\n\n\nconst routeComponents = [\n    {\n        path: \"/\",\n        component: HomePage\n    },\n    {\n        path: \"/irregular-verbs\",\n        component: IrregularVerbs,\n        navName: \"Irregular Verb\"\n    },\n    {\n        path: \"/training\",\n        component: Training,\n        navName: \"Training\"\n    }\n];\n\nfunction App() {\n    const classes = useStyles();\n    return (\n        <div className=\"App\">\n            <header>\n                <Paper>\n                    <nav>\n                        {routeComponents.map(\n                            ({navName, path}) =>\n                                navName ? (\n                                    <Link key={path} to={path} className={classes.link}>\n                                        <Button>\n                                            {navName}\n                                        </Button>\n                                    </Link>\n                                ) : null\n                        )}\n                    </nav>\n                </Paper>\n            </header>\n            <main>\n                {routeComponents.map(({path, component}) => (\n                    <Route key={path} path={path} exact component={component}/>\n                ))}\n            </main>\n        </div>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport {HashRouter as Router} from \"react-router-dom\";\nimport {createTheme, MuiThemeProvider} from '@material-ui/core/styles';\nimport blue from '@material-ui/core/colors/blue';\nimport red from '@material-ui/core/colors/red';\nimport green from '@material-ui/core/colors/green';\n\nconst theme = createTheme({\n    palette: {\n        primary: blue,\n        secondary: red,\n        success: green // TODO how to add custom variant?\n    },\n});\n\nReactDOM.render(\n    <Router>\n        <MuiThemeProvider theme={theme}>\n            <App/>\n        </MuiThemeProvider>\n    </Router>,\n    document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}