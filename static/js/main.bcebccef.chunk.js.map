{"version":3,"sources":["components/Page/index.jsx","data.js","pages/IrregularVerbs/index.jsx","components/OutlinedInput/index.jsx","pages/Training/components/CheckVerbForm/index.jsx","pages/Training/components/FormSettings/index.jsx","pages/Training/index.jsx","App.js","pages/HomePage/index.jsx","pages/Training/helpers.js","serviceWorker.js","index.js"],"names":["Index","_ref","title","children","react_default","a","createElement","Grid","container","justify","alignItems","irregularVerbs","concat","id","group","v1","t1","v2","t2","v3","t3","meaning","extended","useStyles","makeStyles","theme","helper","marginBottom","spacing","column","color","backgroundColor","palette","primary","main","t","components_OutlinedInput","errors","touched","name","label","fullWidth","className","labelRef","useRef","_useState","useState","_useState2","Object","slicedToArray","labelWidth","setLabelWidth","useEffect","current","offsetWidth","FormControl","variant","error","InputLabel","htmlFor","ref","formik_esm","render","_ref2","field","OutlinedInput","assign","component","FormHelperText","numberOfCards","Yup","args","message","test","value","path","this","createError","_args$message","match","textField","marginLeft","marginRight","&.error","secondary","&.success","validationSchema","shape","isEnglish","required","initValues","initAttempt","success","fields","keys","CheckVerbForm","word","handleOnSubmit","stop","attempt","setAttempt","classes","initialValues","onSubmit","values","validateForm","setFieldError","setErrors","resetForm","errorsAfterCheck","newAttempt","forEach","key","newErrors","length","setTimeout","_ref3","Card","CardContent","Typography","gutterBottom","map","index","CardActions","Button","type","onClick","defaultProps","FormSettings","settings","handleSubmit","setSettings","_ref$maxNumberOfCards","maxNumberOfCards","validate","count","Number","FormControlLabel","control","Switch","checked","withExtended","onChange","target","objectSpread","oneAttempt","_ref4","defaultSettings","link","display","padding","routeComponents","Page","verbs","setVerbs","_useState3","_useState4","searchBy","setSearchBy","_useState5","_useState6","setWithExtended","_useState7","_useState8","showTranscription","setShowTranscription","words","filter","includes","Input","event","_event$target","items","Paper","Table","TableHead","TableRow","TableCell","TableBody","hover","navName","status","setStatus","cards","setCards","setWords","_useState9","_useState10","step","setStep","start","itemsArray","numberOfItems","result","Array","isArray","item","Math","floor","random","push","getRandom","ProgressBlock","components_CheckVerbForm","nextStep","next","FinishBlock","ButtonGroup","components_FormSettings","newSettings","App","react_router_dom","to","react_router","exact","Boolean","window","location","hostname","createMuiTheme","blue","red","green","ReactDOM","MuiThemeProvider","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.bcebccef.chunk.js","sourcesContent":["import React from \"react\";\n// ui components\nimport Grid from '@material-ui/core/Grid';\n\nconst Index = ({title, children}) => {\n    return (\n        <Grid container>\n            <Grid container justify=\"center\" alignItems=\"center\">\n                {title && <h1>{title}</h1>}\n            </Grid>\n            <Grid container>\n                {children}\n            </Grid>\n\n        </Grid>\n\n    );\n};\n\nexport default Index;\n","export const group1 = [\n  {\n    id: 1,\n    group: 1,\n    v1: \"be\",\n    t1: \"[bi]\",\n    v2: \"was, were\",\n    t2: \"[wɒz] [wɜː]\",\n    v3: \"been\",\n    t3: \"[biːn]\",\n    meaning: \"быть\"\n  },\n  {\n    id: 2,\n    group: 1,\n    v1: \"bear\",\n    t1: \"[beə]\",\n    v2: \"bore\",\n    t2: \"[bɔː]\",\n    v3: \"born, borne\",\n    t3: \"[bɔːn] [bɔːn]\",\n    meaning: \"нести, родить\",\n    extended: true\n  },\n  {\n    id: 3,\n    group: 1,\n    v1: \"beat\",\n    t1: \"[biːt]\",\n    v2: \"beat\",\n    t2: \"[biːt]\",\n    v3: \"beaten\",\n    t3: \"[ˈbiːtən]\",\n    meaning: \"бить\"\n  },\n  {\n    id: 4,\n    group: 1,\n    v1: \"become\",\n    t1: \"[bɪˈkʌm]\",\n    v2: \"became\",\n    t2: \"[bɪˈkeɪm]\",\n    v3: \"become\",\n    t3: \"[bɪˈkʌm]\",\n    meaning: \"становиться\"\n  },\n  {\n    id: 5,\n    group: 1,\n    v1: \"begin\",\n    t1: \"[bɪˈɡɪn]\",\n    v2: \"began\",\n    t2: \"[bɪˈɡæn]\",\n    v3: \"begun\",\n    t3: \"[bɪˈɡʌn]\",\n    meaning: \"начинаться\"\n  },\n  {\n    id: 6,\n    group: 1,\n    v1: \"bend\",\n    t1: \"[bend]\",\n    v2: \"bent\",\n    t2: \"[bent]\",\n    v3: \"bent\",\n    t3: \"[bent]\",\n    meaning: \"гнуть\",\n    extended: true\n  },\n  {\n    id: 7,\n    group: 1,\n    v1: \"bet\",\n    t1: \"[ˈbet]\",\n    v2: \"bet\",\n    t2: \"[ˈbet]\",\n    v3: \"bet\",\n    t3: \"[ˈbet]\",\n    meaning: \"держать пари\",\n    extended: true\n  },\n  {\n    id: 8,\n    group: 1,\n    v1: \"bind\",\n    t1: \"[baɪnd]\",\n    v2: \"bound\",\n    t2: \"[baʊnd]\",\n    v3: \"bound\",\n    t3: \"[baʊnd]\",\n    meaning: \"связать\",\n    extended: true\n  },\n  {\n    id: 9,\n    group: 1,\n    v1: \"bite\",\n    t1: \"[baɪt]\",\n    v2: \"bit\",\n    t2: \"[bɪt]\",\n    v3: \"bitten\",\n    t3: \"[ˈbɪtən]\",\n    meaning: \"кусать\",\n    extended: true\n  },\n  {\n    id: 10,\n    group: 1,\n    v1: \"bleed\",\n    t1: \"[bliːd]\",\n    v2: \"bled\",\n    t2: \"[bled]\",\n    v3: \"bled\",\n    t3: \"[bled]\",\n    meaning: \"кровоточить\",\n    extended: true\n  },\n  {\n    id: 11,\n    group: 1,\n    v1: \"blow\",\n    t1: \"[bləʊ]\",\n    v2: \"blew\",\n    t2: \"[bluː]\",\n    v3: \"blown\",\n    t3: \"[bləʊn]\",\n    meaning: \"дуть\"\n  },\n  {\n    id: 12,\n    group: 1,\n    v1: \"break\",\n    t1: \"[breɪk]\",\n    v2: \"broke\",\n    t2: \"[brəʊk]\",\n    v3: \"broken\",\n    t3: \"[ˈbrəʊkən]\",\n    meaning: \"ломать(ся)\"\n  },\n  {\n    id: 13,\n    group: 1,\n    v1: \"breed\",\n    t1: \"[briːd]\",\n    v2: \"bred\",\n    t2: \"[bred]\",\n    v3: \"bred\",\n    t3: \"[bred]\",\n    meaning: \"выращивать, разводить\",\n    extended: true\n  },\n  {\n    id: 14,\n    group: 1,\n    v1: \"bring\",\n    t1: \"[brɪŋ]\",\n    v2: \"brought\",\n    t2: \"[ˈbrɔːt]\",\n    v3: \"brought\",\n    t3: \"[ˈbrɔːt]\",\n    meaning: \"приносить\"\n  },\n  {\n    id: 15,\n    group: 1,\n    v1: \"build\",\n    t1: \"[bɪld]\",\n    v2: \"built\",\n    t2: \"[bɪlt]\",\n    v3: \"built\",\n    t3: \"[bɪlt]\",\n    meaning: \"строить\"\n  },\n  {\n    id: 16,\n    group: 1,\n    v1: \"burn\",\n    t1: \"[bɜːn]\",\n    v2: \"burnt\",\n    t2: \"[bɜːnt] [bɜːnd]\",\n    v3: \"burnt\",\n    t3: \"[bɜːnt] [bɜːnd]\",\n    meaning: \"гореть, жечь\"\n  },\n  {\n    id: 17,\n    group: 1,\n    v1: \"burst\",\n    t1: \"[bɜːst]\",\n    v2: \"burst\",\n    t2: \"[bɜːst]\",\n    v3: \"burst\",\n    t3: \"[bɜːst]\",\n    meaning: \"разразиться, взорваться\",\n    extended: true\n  },\n  {\n    id: 18,\n    group: 1,\n    v1: \"buy\",\n    t1: \"[baɪ]\",\n    v2: \"bought\",\n    t2: \"[ˈbɔːt]\",\n    v3: \"bought\",\n    t3: \"[ˈbɔːt]\",\n    meaning: \"покупать\"\n  },\n  {\n    id: 19,\n    group: 1,\n    v1: \"cast\",\n    t1: \"[kɑːst]\",\n    v2: \"cast\",\n    t2: \"[kɑːst]\",\n    v3: \"cast\",\n    t3: \"[kɑːst]\",\n    meaning: \"кинуть, лить металл\",\n    extended: true\n  },\n  {\n    id: 20,\n    group: 1,\n    v1: \"catch\",\n    t1: \"[kætʃ]\",\n    v2: \"caught\",\n    t2: \"[ˈkɔːt]\",\n    v3: \"caught\",\n    t3: \"[ˈkɔːt]\",\n    meaning: \"ловить, хватать\"\n  },\n  {\n    id: 21,\n    group: 1,\n    v1: \"choose\",\n    t1: \"[tʃuːz]\",\n    v2: \"chose\",\n    t2: \"[tʃəʊz]\",\n    v3: \"chosen\",\n    t3: \"[ˈtʃəʊzən]\",\n    meaning: \"выбирать\"\n  },\n  {\n    id: 22,\n    group: 1,\n    v1: \"come\",\n    t1: \"[kʌm]\",\n    v2: \"came\",\n    t2: \"[keɪm]\",\n    v3: \"come\",\n    t3: \"[kʌm]\",\n    meaning: \"приходить\"\n  },\n  {\n    id: 23,\n    group: 1,\n    v1: \"cost\",\n    t1: \"[kɒst]\",\n    v2: \"cost\",\n    t2: \"[kɒst]\",\n    v3: \"cost\",\n    t3: \"[kɒst]\",\n    meaning: \"стоить\"\n  },\n  {\n    id: 24,\n    group: 1,\n    v1: \"creep\",\n    t1: \"[kriːp]\",\n    v2: \"crept\",\n    t2: \"[krept]\",\n    v3: \"crept\",\n    t3: \"[krept]\",\n    meaning: \"ползти\",\n    extended: true\n  },\n  {\n    id: 25,\n    group: 1,\n    v1: \"cut\",\n    t1: \"[kʌt]\",\n    v2: \"cut\",\n    t2: \"[kʌt]\",\n    v3: \"cut\",\n    t3: \"[kʌt]\",\n    meaning: \"резать\"\n  },\n  {\n    id: 26,\n    group: 1,\n    v1: \"deal\",\n    t1: \"[diːl]\",\n    v2: \"dealt\",\n    t2: \"[delt]\",\n    v3: \"dealt\",\n    t3: \"[delt]\",\n    meaning: \"иметь дело\",\n    extended: true\n  },\n  {\n    id: 27,\n    group: 1,\n    v1: \"dig\",\n    t1: \"[dɪɡ]\",\n    v2: \"dug\",\n    t2: \"[dʌɡ]\",\n    v3: \"dug\",\n    t3: \"[dʌɡ]\",\n    meaning: \"копать\",\n    extended: true\n  },\n  {\n    id: 28,\n    group: 1,\n    v1: \"do\",\n    t1: \"[duː]\",\n    v2: \"did\",\n    t2: \"[dɪd]\",\n    v3: \"done\",\n    t3: \"[dʌn]\",\n    meaning: \"делать\"\n  },\n  {\n    id: 29,\n    group: 1,\n    v1: \"draw\",\n    t1: \"[drɔː]\",\n    v2: \"drew\",\n    t2: \"[druː]\",\n    v3: \"drawn\",\n    t3: \"[drɔːn]\",\n    meaning: \"тащить, рисовать\"\n  },\n  {\n    id: 30,\n    group: 1,\n    v1: \"dream\",\n    t1: \"[driːm]\",\n    v2: \"dreamt, dreamed\",\n    t2: \"[dremt] [driːmd]\",\n    v3: \"dreamt, dreamed\",\n    t3: \"[dremt] [driːmd]\",\n    meaning: \"грезить, мечтать\",\n    extended: true\n  },\n  {\n    id: 31,\n    group: 1,\n    v1: \"drink\",\n    t1: \"[drɪŋk]\",\n    v2: \"drank\",\n    t2: \"[dræŋk]\",\n    v3: \"drunk\",\n    t3: \"[drʌŋk]\",\n    meaning: \"пить\"\n  },\n  {\n    id: 32,\n    group: 1,\n    v1: \"drive\",\n    t1: \"[draɪv]\",\n    v2: \"drove\",\n    t2: \"[drəʊv]\",\n    v3: \"driven\",\n    t3: \"[ˈdrɪvən]\",\n    meaning: \"везти, гнать\"\n  },\n  {\n    id: 33,\n    group: 1,\n    v1: \"dwell\",\n    t1: \"[dwel]\",\n    v2: \"dwelt\",\n    t2: \"[dwelt]\",\n    v3: \"dwelt\",\n    t3: \"[dwelt]\",\n    meaning: \"обитать, задерживаться\",\n    extended: true\n  },\n  {\n    id: 34,\n    group: 1,\n    v1: \"eat\",\n    t1: \"[iːt]\",\n    v2: \"ate\",\n    t2: \"[et]\",\n    v3: \"eaten\",\n    t3: \"[ˈiːtən]\",\n    meaning: \"есть, кушать\"\n  },\n  {\n    id: 35,\n    group: 1,\n    v1: \"fall\",\n    t1: \"[fɔːl]\",\n    v2: \"fell\",\n    t2: \"[ fel]\",\n    v3: \"fallen\",\n    t3: \"[ ˈfɔːlən]\",\n    meaning: \"падать\"\n  },\n  {\n    id: 36,\n    group: 1,\n    v1: \"feed\",\n    t1: \"[fiːd]\",\n    v2: \"fed\",\n    t2: \"[fed]\",\n    v3: \"fed\",\n    t3: \"[fed]\",\n    meaning: \"кормить\",\n    extended: true\n  },\n  {\n    id: 37,\n    group: 1,\n    v1: \"feel\",\n    t1: \"[fiːl]\",\n    v2: \"felt\",\n    t2: \"[felt]\",\n    v3: \"felt\",\n    t3: \"[felt]\",\n    meaning: \"чувствовать\"\n  },\n  {\n    id: 38,\n    group: 1,\n    v1: \"fight\",\n    t1: \"[faɪt]\",\n    v2: \"fought\",\n    t2: \"[ˈfɔːt]\",\n    v3: \"fought\",\n    t3: \"[ˈfɔːt]\",\n    meaning: \"бороться, сражаться\"\n  },\n  {\n    id: 39,\n    group: 1,\n    v1: \"find\",\n    t1: \"[faɪnd]\",\n    v2: \"found\",\n    t2: \"[faʊnd]\",\n    v3: \"found\",\n    t3: \"[faʊnd]\",\n    meaning: \"находить\"\n  },\n  {\n    id: 40,\n    group: 1,\n    v1: \"flee\",\n    t1: \"[fliː]\",\n    v2: \"fled\",\n    t2: \"[fled]\",\n    v3: \"fled\",\n    t3: \"[fled]\",\n    meaning: \"бежать, спасаться\",\n    extended: true\n  },\n  {\n    id: 41,\n    group: 1,\n    v1: \"fly\",\n    t1: \"[flaɪ]\",\n    v2: \"flew\",\n    t2: \"[fluː]\",\n    v3: \"flown\",\n    t3: \"[fləʊn]\",\n    meaning: \"летать\"\n  },\n  {\n    id: 42,\n    group: 1,\n    v1: \"forbid\",\n    t1: \"[fəˈbɪd]\",\n    v2: \"forbad, forbade\",\n    t2: \"[fəˈbæd] [fəˈbæd]\",\n    v3: \"forbidden\",\n    t3: \"[fəˈbɪdən]\",\n    meaning: \"запретить\",\n    extended: true\n  },\n  {\n    id: 43,\n    group: 1,\n    v1: \"foresee\",\n    t1: \"[fɔːˈsiː]\",\n    v2: \"foresaw\",\n    t2: \"[fɔːˈsɔː]\",\n    v3: \"foreseen\",\n    t3: \"[fɔːˈsiːn]\",\n    meaning: \"предвидеть\",\n    extended: true\n  },\n  {\n    id: 44,\n    group: 1,\n    v1: \"foretell\",\n    t1: \"[fɔːˈtel]\",\n    v2: \"foretold\",\n    t2: \"[fɔːˈtəʊld]\",\n    v3: \"foretold\",\n    t3: \"[fɔːˈtəʊld]\",\n    meaning: \"предсказывать\",\n    extended: true\n  },\n  {\n    id: 45,\n    group: 1,\n    v1: \"forget\",\n    t1: \"[fəˈɡet]\",\n    v2: \"forgot\",\n    t2: \"[fəˈɡɒt]\",\n    v3: \"forgotten\",\n    t3: \"[fəˈɡɒtən]\",\n    meaning: \"забывать\"\n  },\n  {\n    id: 46,\n    group: 1,\n    v1: \"forgive\",\n    t1: \"[fəˈɡɪv]\",\n    v2: \"forgave\",\n    t2: \"[fəˈɡeɪv]\",\n    v3: \"forgiven\",\n    t3: \"[fəˈɡɪvən]\",\n    meaning: \"прощать\"\n  },\n  {\n    id: 47,\n    group: 1,\n    v1: \"freeze\",\n    t1: \"[friːz]\",\n    v2: \"froze\",\n    t2: \"[frəʊz]\",\n    v3: \"frozen\",\n    t3: \"[ˈfrəʊzən]\",\n    meaning: \"замораживать\"\n  },\n  {\n    id: 48,\n    group: 1,\n    v1: \"get\",\n    t1: \"[ˈɡet]\",\n    v2: \"got\",\n    t2: \"[ˈɡɒt]\",\n    v3: \"got\",\n    t3: \"[ˈɡɒt]\",\n    meaning: \"получатьж становиться, делаться\"\n  },\n  {\n    id: 49,\n    group: 1,\n    v1: \"give\",\n    t1: \"[ɡɪv]\",\n    v2: \"gave\",\n    t2: \"[ɡeɪv]\",\n    v3: \"given\",\n    t3: \"[ɡɪvən]\",\n    meaning: \"давать\"\n  },\n  {\n    id: 50,\n    group: 1,\n    v1: \"go\",\n    t1: \"[ɡəʊ]\",\n    v2: \"went\",\n    t2: \"[ˈwent]\",\n    v3: \"gone\",\n    t3: \"[ɡɒn]\",\n    meaning: \"идти, ходить\"\n  }\n];\n\nexport const group2 = [];\n\nexport const group3 = [];\n\nexport const group4 = [];\n\nexport const irregularVerbs = [...group1, ...group2, ...group3, ...group4];\n\nconst irrVerbList = [\n  {\n    v1: \"grind\",\n    t1: \"[ɡraɪnd]\",\n    v2: \"ground\",\n    t2: \"[ɡraʊnd]\",\n    v3: \"ground\",\n    t3: \"[ɡraʊnd]\",\n    meaning: \"точить, молоть\"\n  },\n  {\n    v1: \"grow\",\n    t1: \"[ɡrəʊ]\",\n    v2: \"grew\",\n    t2: \"[ɡruː]\",\n    v3: \"grown\",\n    t3: \"[ɡrəʊn]\",\n    meaning: \"расти\"\n  },\n  {\n    v1: \"hang\",\n    t1: \"[hæŋ]\",\n    v2: \"hung, hanged\",\n    t2: \"[hʌŋ] [hæŋd]\",\n    v3: \"hung, hanged\",\n    t3: \"[hʌŋ] [hæŋd]\",\n    meaning: \"висеть, повесить\"\n  },\n  {\n    v1: \"have\",\n    t1: \"[hæv]\",\n    v2: \"had\",\n    t2: \"[hæd]\",\n    v3: \"had\",\n    t3: \"[hæd]\",\n    meaning: \"иметь\"\n  },\n  {\n    v1: \"hear\",\n    t1: \"[hɪə]\",\n    v2: \"heard\",\n    t2: \"[hɜːd]\",\n    v3: \"heard\",\n    t3: \"[hɜːd]\",\n    meaning: \"слушать\"\n  },\n  {\n    v1: \"hide\",\n    t1: \"[haɪd]\",\n    v2: \"hid\",\n    t2: \"[hɪd]\",\n    v3: \"hidden\",\n    t3: \"[ˈhɪdən]\",\n    meaning: \"прятать(ся)\"\n  },\n  {\n    v1: \"hit\",\n    t1: \"[hɪt]\",\n    v2: \"hit\",\n    t2: \"[hɪt]\",\n    v3: \"hit\",\n    t3: \"[hɪt]\",\n    meaning: \"ударить, попасть\"\n  },\n  {\n    v1: \"hold\",\n    t1: \"[həʊld]\",\n    v2: \"held\",\n    t2: \"[held]\",\n    v3: \"held\",\n    t3: \"[held]\",\n    meaning: \"держать\"\n  },\n  {\n    v1: \"hurt\",\n    t1: \"[hɜːt]\",\n    v2: \"hurt\",\n    t2: \"[hɜːt]\",\n    v3: \"hurt\",\n    t3: \"[hɜːt]\",\n    meaning: \"причинить боль\"\n  },\n  {\n    v1: \"keep\",\n    t1: \"[kiːp]\",\n    v2: \"kept\",\n    t2: \"[kept]\",\n    v3: \"kept\",\n    t3: \"[kept]\",\n    meaning: \"хранить\"\n  },\n  {\n    v1: \"know\",\n    t1: \"[nəʊ]\",\n    v2: \"knew\",\n    t2: \"[njuː]\",\n    v3: \"known\",\n    t3: \"[nəʊn]\",\n    meaning: \"знать\"\n  },\n  {\n    v1: \"lay\",\n    t1: \"[leɪ]\",\n    v2: \"laid\",\n    t2: \"[leɪd]\",\n    v3: \"laid\",\n    t3: \"[leɪd]\",\n    meaning: \"класть, положить\"\n  },\n  {\n    v1: \"lead\",\n    t1: \"[liːd]\",\n    v2: \"led\",\n    t2: \"[led]\",\n    v3: \"led\",\n    t3: \"[led]\",\n    meaning: \"вести\"\n  },\n  {\n    v1: \"learn\",\n    t1: \"[lɜːn]\",\n    v2: \"learnt, learned\",\n    t2: \"[lɜːnt] [lɜːnd]\",\n    v3: \"learnt, learned\",\n    t3: \"[lɜːnt] [lɜːnd]\",\n    meaning: \"учить\"\n  },\n  {\n    v1: \"leave\",\n    t1: \"[liːv]\",\n    v2: \"left\",\n    t2: \"[left]\",\n    v3: \"left\",\n    t3: \"[left]\",\n    meaning: \"оставить\"\n  },\n  {\n    v1: \"lend\",\n    t1: \"[lend]\",\n    v2: \"lent\",\n    t2: \"[lent]\",\n    v3: \"lent\",\n    t3: \"[lent]\",\n    meaning: \"одолжить\"\n  },\n  {\n    v1: \"let\",\n    t1: \"[let]\",\n    v2: \"let\",\n    t2: \"[ let]\",\n    v3: \"let\",\n    t3: \"[ let]\",\n    meaning: \"пустить, дать\"\n  },\n  {\n    v1: \"lie\",\n    t1: \"[laɪ]\",\n    v2: \"lay\",\n    t2: \"[leɪ]\",\n    v3: \"lain\",\n    t3: \"[leɪn]\",\n    meaning: \"лежать\"\n  },\n  {\n    v1: \"light\",\n    t1: \"[laɪt]\",\n    v2: \"lit, lighted\",\n    t2: \"[lɪt] [ˈlaɪtɪd]\",\n    v3: \"lit, lighted\",\n    t3: \"[lɪt] [ˈlaɪtɪd]\",\n    meaning: \"осветить\"\n  },\n  {\n    v1: \"lose\",\n    t1: \"[luːz]\",\n    v2: \"lost\",\n    t2: \"[lɒst]\",\n    v3: \"lost\",\n    t3: \"[lɒst]\",\n    meaning: \"терять\"\n  },\n  {\n    v1: \"make\",\n    t1: \"[ˈmeɪk]\",\n    v2: \"made\",\n    t2: \"[ˈmeɪd]\",\n    v3: \"made\",\n    t3: \"[ˈmeɪd]\",\n    meaning: \"делать\"\n  },\n  {\n    v1: \"mean\",\n    t1: \"[miːn]\",\n    v2: \"meant\",\n    t2: \"[ment]\",\n    v3: \"meant\",\n    t3: \"[ment]\",\n    meaning: \"подразумевать\"\n  },\n  {\n    v1: \"meet\",\n    t1: \"[miːt]\",\n    v2: \"met\",\n    t2: \"[met]\",\n    v3: \"met\",\n    t3: \"[met]\",\n    meaning: \"встретить\"\n  },\n  {\n    v1: \"mistake\",\n    t1: \"[mɪˈsteɪk]\",\n    v2: \"mistook\",\n    t2: \"[mɪˈstʊk]\",\n    v3: \"mistaken\",\n    t3: \"[mɪˈsteɪkən]\",\n    meaning: \"неправильно понимать\"\n  },\n  {\n    v1: \"misunderstand\",\n    t1: \"[ˌmɪsˌʌndəˈstænd]\",\n    v2: \"misunderstood\",\n    t2: \"[ˌmɪsˌʌndəˈstʊd]\",\n    v3: \"misunderstood\",\n    t3: \"[ˌmɪsˌʌndəˈstʊd]\",\n    meaning: \"неправильно понимать\"\n  },\n  {\n    v1: \"overcome\",\n    t1: \"[ˌəʊvəˈkʌm]\",\n    v2: \"overcame\",\n    t2: \"[ˌəʊvəˈkeɪm]\",\n    v3: \"overcome\",\n    t3: \"[ˌəʊvəˈkʌm]\",\n    meaning: \"преодолевать\"\n  },\n  {\n    v1: \"pay\",\n    t1: \"[peɪ]\",\n    v2: \"paid\",\n    t2: \"[peɪd]\",\n    v3: \"paid\",\n    t3: \"[peɪd]\",\n    meaning: \"платить\"\n  },\n  {\n    v1: \"put\",\n    t1: \"[ˈpʊt]\",\n    v2: \"put\",\n    t2: \"[ˈpʊt]\",\n    v3: \"put\",\n    t3: \"[ˈpʊt]\",\n    meaning: \"класть\"\n  },\n  {\n    v1: \"read\",\n    t1: \"[riːd]\",\n    v2: \"read\",\n    t2: \"[red]\",\n    v3: \"read\",\n    t3: \"[red]\",\n    meaning: \"читать\"\n  },\n  {\n    v1: \"ride\",\n    t1: \"[raɪd]\",\n    v2: \"rode\",\n    t2: \"[rəʊd]\",\n    v3: \"ridden\",\n    t3: \"[ˈrɪdən]\",\n    meaning: \"ездить верхом\"\n  },\n  {\n    v1: \"ring\",\n    t1: \"[rɪŋ]\",\n    v2: \"rang\",\n    t2: \"[ræŋ]\",\n    v3: \"rung\",\n    t3: \"[rʌŋ]\",\n    meaning: \"звонить\"\n  },\n  {\n    v1: \"rise\",\n    t1: \"[raɪz]\",\n    v2: \"rose\",\n    t2: \"[rəʊz]\",\n    v3: \"risen\",\n    t3: \"[ˈrɪzən]\",\n    meaning: \"подняться\"\n  },\n  {\n    v1: \"run\",\n    t1: \"[rʌn]\",\n    v2: \"ran\",\n    t2: \"[ræn]\",\n    v3: \"run\",\n    t3: \"[rʌn]\",\n    meaning: \"бежать, течь\"\n  },\n  {\n    v1: \"saw\",\n    t1: \"[ˈsɔː]\",\n    v2: \"sawed\",\n    t2: \"[ˈsɔːd]\",\n    v3: \"sawn, sawed\",\n    t3: \"[sɔːn] [ˈsɔːd]\",\n    meaning: \"пилить\"\n  },\n  {\n    v1: \"say\",\n    t1: \"[ˈseɪ]\",\n    v2: \"said\",\n    t2: \"[ˈsed]\",\n    v3: \"said\",\n    t3: \"[ˈsed]\",\n    meaning: \"говорить, сказать\"\n  },\n  {\n    v1: \"see\",\n    t1: \"[ˈsiː]\",\n    v2: \"saw\",\n    t2: \"[ˈsɔː]\",\n    v3: \"seen\",\n    t3: \"[ˈsiːn]\",\n    meaning: \"видеть\"\n  },\n  {\n    v1: \"seek\",\n    t1: \"[siːk]\",\n    v2: \"sought\",\n    t2: \"[ˈsɔːt]\",\n    v3: \"sought\",\n    t3: \"[ˈsɔːt]\",\n    meaning: \"искать\"\n  },\n  {\n    v1: \"sell\",\n    t1: \"[sel]\",\n    v2: \"sold\",\n    t2: \"[səʊld]\",\n    v3: \"sold\",\n    t3: \"[səʊld]\",\n    meaning: \"продавать\"\n  },\n  {\n    v1: \"send\",\n    t1: \"[send]\",\n    v2: \"sent\",\n    t2: \"[sent]\",\n    v3: \"sent\",\n    t3: \"[sent]\",\n    meaning: \"послать\"\n  },\n  {\n    v1: \"set\",\n    t1: \"[set]\",\n    v2: \"set\",\n    t2: \"[set]\",\n    v3: \"set\",\n    t3: \"[set]\",\n    meaning: \"устанавливать\"\n  },\n  {\n    v1: \"sew\",\n    t1: \"[səʊ]\",\n    v2: \"sewed\",\n    t2: \"[səʊd]\",\n    v3: \"sewed, sewn\",\n    t3: \"[səʊd] [səʊn]\",\n    meaning: \"шить\"\n  },\n  {\n    v1: \"shake\",\n    t1: \"[ʃeɪk]\",\n    v2: \"shook\",\n    t2: \"[ʃʊk]\",\n    v3: \"shaken\",\n    t3: \"[ˈʃeɪkən]\",\n    meaning: \"трясти\"\n  },\n  {\n    v1: \"shine\",\n    t1: \"[ʃaɪn]\",\n    v2: \"shone, shined\",\n    t2: \"[ʃɒn] [ʃaɪnd]\",\n    v3: \"shone, shined\",\n    t3: \"[ʃɒn] [ʃaɪnd]\",\n    meaning: \"светить, сиять\"\n  },\n  {\n    v1: \"shoot\",\n    t1: \"[ʃuːt]\",\n    v2: \"shot\",\n    t2: \"[ʃɒt]\",\n    v3: \"shot\",\n    t3: \"[ʃɒt]\",\n    meaning: \"стрелять, давать побеги\"\n  },\n  {\n    v1: \"show\",\n    t1: \"[ʃəʊ]\",\n    v2: \"showed\",\n    t2: \"[ʃəʊd]\",\n    v3: \"shown, showed\",\n    t3: \"[ʃəʊn] ʃəʊd]\",\n    meaning: \"показывать\"\n  },\n  {\n    v1: \"shrink\",\n    t1: \"[ʃrɪŋk]\",\n    v2: \"shrank\",\n    t2: \"[ʃræŋk]\",\n    v3: \"shrunk\",\n    t3: \"[ʃrʌŋk]\",\n    meaning: \"сокращаться, сжиматься\"\n  },\n  {\n    v1: \"shut\",\n    t1: \"[ʃʌt]\",\n    v2: \"shut\",\n    t2: \"[ʃʌt]\",\n    v3: \"shut\",\n    t3: \"[ʃʌt]\",\n    meaning: \"закрывать\"\n  },\n  {\n    v1: \"sing\",\n    t1: \"[sɪŋ]\",\n    v2: \"sang\",\n    t2: \"[ sæŋ]\",\n    v3: \"sung\",\n    t3: \"[ sʌŋ]\",\n    meaning: \"петь\"\n  },\n  {\n    v1: \"sink\",\n    t1: \"[sɪŋk]\",\n    v2: \"sank\",\n    t2: \"[sæŋk]\",\n    v3: \"sunk\",\n    t3: \"[sʌŋk]\",\n    meaning: \"тонуть\"\n  },\n  {\n    v1: \"sit\",\n    t1: \"[sɪt]\",\n    v2: \"sat\",\n    t2: \"[sæt]\",\n    v3: \"sat\",\n    t3: \"[sæt]\",\n    meaning: \"сидеть\"\n  },\n  {\n    v1: \"slay\",\n    t1: \"[sleɪ]\",\n    v2: \"slew\",\n    t2: \"[sluː]\",\n    v3: \"slain\",\n    t3: \"[sleɪn]\",\n    meaning: \"убивать\"\n  },\n  {\n    v1: \"sleep\",\n    t1: \"[sliːp]\",\n    v2: \"slept\",\n    t2: \"[slept]\",\n    v3: \"slept\",\n    t3: \"[slept]\",\n    meaning: \"спать\"\n  },\n  {\n    v1: \"slide\",\n    t1: \"[slaɪd]\",\n    v2: \"slid\",\n    t2: \"[slɪd]\",\n    v3: \"slid\",\n    t3: \"[slɪd]\",\n    meaning: \"скользить\"\n  },\n  {\n    v1: \"smell\",\n    t1: \"[smel]\",\n    v2: \"smelt, smelled\",\n    t2: \"[smelt] [smeld]\",\n    v3: \"smelt, smelled\",\n    t3: \"[smelt] [smeld]\",\n    meaning: \"пахнуть, нюхать\"\n  },\n  {\n    v1: \"speak\",\n    t1: \"[spiːk]\",\n    v2: \"spoke\",\n    t2: \"[spəʊk]\",\n    v3: \"spoken\",\n    t3: \"[ˈspəʊkən]\",\n    meaning: \"говорить\"\n  },\n  {\n    v1: \"spend\",\n    t1: \"[spend]\",\n    v2: \"spent\",\n    t2: \"[spent]\",\n    v3: \"spent\",\n    t3: \"[spent]\",\n    meaning: \"тратить, проводить\"\n  },\n  {\n    v1: \"spit\",\n    t1: \"[spɪt]\",\n    v2: \"spat, spit\",\n    t2: \"[spæt] [spɪt]\",\n    v3: \"spat, spit\",\n    t3: \"[spæt] [spɪt]\",\n    meaning: \"плевать\"\n  },\n  {\n    v1: \"split\",\n    t1: \"[splɪt]\",\n    v2: \"split\",\n    t2: \"[splɪt]\",\n    v3: \"split\",\n    t3: \"[splɪt]\",\n    meaning: \"расщепить\"\n  },\n  {\n    v1: \"spread\",\n    t1: \"[spred]\",\n    v2: \"spread\",\n    t2: \"[spred]\",\n    v3: \"spread\",\n    t3: \"[spred]\",\n    meaning: \"распространяться\"\n  },\n  {\n    v1: \"spring\",\n    t1: \"[sprɪŋ]\",\n    v2: \"sprang\",\n    t2: \"[spræŋ]\",\n    v3: \"sprung\",\n    t3: \"[sprʌŋ]\",\n    meaning: \"скакать, пружинить\"\n  },\n  {\n    v1: \"stand\",\n    t1: \"[stænd]\",\n    v2: \"stood\",\n    t2: \"[stʊd]\",\n    v3: \"stood\",\n    t3: \"[stʊd]\",\n    meaning: \"стоять\"\n  },\n  {\n    v1: \"steal\",\n    t1: \"[stiːl]\",\n    v2: \"stole\",\n    t2: \"[stəʊl]\",\n    v3: \"stolen\",\n    t3: \"[ˈstəʊlən]\",\n    meaning: \"украсть\"\n  },\n  {\n    v1: \"stick\",\n    t1: \"[stɪk]\",\n    v2: \"stuck\",\n    t2: \"[stʌk]\",\n    v3: \"stuck\",\n    t3: \"[stʌk]\",\n    meaning: \"уколоть, приклеить\"\n  },\n  {\n    v1: \"sting\",\n    t1: \"[stɪŋ]\",\n    v2: \"stung\",\n    t2: \"[stʌɡ]\",\n    v3: \"stung\",\n    t3: \"[stʌɡ]\",\n    meaning: \"ужалить\"\n  },\n  {\n    v1: \"stink\",\n    t1: \"[stɪŋk]\",\n    v2: \"stank, stunk\",\n    t2: \"[stæŋk] [stʌŋk]\",\n    v3: \"stunk\",\n    t3: \"[stʌŋk]\",\n    meaning: \"вонять\"\n  },\n  {\n    v1: \"strike\",\n    t1: \"[straɪk]\",\n    v2: \"struck\",\n    t2: \"[strʌk]\",\n    v3: \"struck\",\n    t3: \"[strʌk]\",\n    meaning: \"ударить, бить, бастовать\"\n  },\n  {\n    v1: \"strive\",\n    t1: \"[straɪv]\",\n    v2: \"strove\",\n    t2: \"[strəʊv]\",\n    v3: \"striven\",\n    t3: \"[ˈstrɪvən]\",\n    meaning: \"стараться\"\n  },\n  {\n    v1: \"swear\",\n    t1: \"[sweə]\",\n    v2: \"swore\",\n    t2: \"[swɔː]\",\n    v3: \"sworn\",\n    t3: \"[swɔːn]\",\n    meaning: \"клясться, браниться\"\n  },\n  {\n    v1: \"sweep\",\n    t1: \"[swiːp]\",\n    v2: \"swept\",\n    t2: \"[swept]\",\n    v3: \"swept\",\n    t3: \"[swept]\",\n    meaning: \"мести, промчаться\"\n  },\n  {\n    v1: \"swim\",\n    t1: \"[swɪm]\",\n    v2: \"swam\",\n    t2: \"[swæm]\",\n    v3: \"swum\",\n    t3: \"[swʌm]\",\n    meaning: \"плыть\"\n  },\n  {\n    v1: \"swing\",\n    t1: \"[swɪŋ]\",\n    v2: \"swung\",\n    t2: \"[swʌŋ]\",\n    v3: \"swung\",\n    t3: \"[swʌŋ]\",\n    meaning: \"качаться\"\n  },\n  {\n    v1: \"take\",\n    t1: \"[teɪk]\",\n    v2: \"took\",\n    t2: \"[tʊk]\",\n    v3: \"taken\",\n    t3: \"[ˈteɪkən]\",\n    meaning: \"взять, брать\"\n  },\n  {\n    v1: \"teach\",\n    t1: \"[tiːtʃ]\",\n    v2: \"taught\",\n    t2: \"[tɔːt]\",\n    v3: \"taught\",\n    t3: \"[tɔːt]\",\n    meaning: \"учить\"\n  },\n  {\n    v1: \"tear\",\n    t1: \"[ˈteə]\",\n    v2: \"tore\",\n    t2: \"[ˈtɔː]\",\n    v3: \"torn\",\n    t3: \"[ˈtɔːn]\",\n    meaning: \"рвать\"\n  },\n  {\n    v1: \"tell\",\n    t1: \"[tel]\",\n    v2: \"told\",\n    t2: \"[təʊld]\",\n    v3: \"told\",\n    t3: \"[təʊld]\",\n    meaning: \"рассказывать, сказать\"\n  },\n  {\n    v1: \"think\",\n    t1: \"[ˈθɪŋk]\",\n    v2: \"thought\",\n    t2: \"[ˈθɔːt]\",\n    v3: \"thought\",\n    t3: \"[ˈθɔːt]\",\n    meaning: \"думать\"\n  },\n  {\n    v1: \"throw\",\n    t1: \"[ˈθrəʊ]\",\n    v2: \"threw\",\n    t2: \"[θruː]\",\n    v3: \"thrown\",\n    t3: \"[ˈθrəʊn]\",\n    meaning: \"бросить\"\n  },\n  {\n    v1: \"tread\",\n    t1: \"[tred]\",\n    v2: \"trod\",\n    t2: \"[trɒd]\",\n    v3: \"trod, trodden\",\n    t3: \"[trɒd] [ˈtrɒdən]\",\n    meaning: \"ступать\"\n  },\n  {\n    v1: \"understand\",\n    t1: \"[ˌʌndəˈstænd]\",\n    v2: \"understood\",\n    t2: \"[ˌʌndəˈstʊd]\",\n    v3: \"understood\",\n    t3: \"[ˌʌndəˈstʊd]\",\n    meaning: \"понимать\"\n  },\n  {\n    v1: \"wake\",\n    t1: \"[ weɪk]\",\n    v2: \"woke, waked\",\n    t2: \"[wəʊk] [weɪkt]\",\n    v3: \"woken, waked\",\n    t3: \"[ˈwəʊkən] [weɪkt]\",\n    meaning: \"просыпаться, будить\"\n  },\n  {\n    v1: \"wear\",\n    t1: \"[weə]\",\n    v2: \"wore\",\n    t2: \"[wɔː]\",\n    v3: \"worn\",\n    t3: \"[wɔːn]\",\n    meaning: \"носить (одежду)\"\n  },\n  {\n    v1: \"weep\",\n    t1: \"[wiːp]\",\n    v2: \"wept\",\n    t2: \"[wept]\",\n    v3: \"wept\",\n    t3: \"[wept]\",\n    meaning: \"плакать\"\n  },\n  {\n    v1: \"wet\",\n    t1: \"[wet]\",\n    v2: \"wet, wetted\",\n    t2: \"[wet] [ˈwetɪd]\",\n    v3: \"wet, wetted\",\n    t3: \"[wet] [ˈwetɪd]\",\n    meaning: \"мочить, увлажнять\"\n  },\n  {\n    v1: \"win\",\n    t1: \"[wɪn]\",\n    v2: \"won\",\n    t2: \"[wʌn]\",\n    v3: \"won\",\n    t3: \"[wʌn]\",\n    meaning: \"выиграть\"\n  },\n  {\n    v1: \"wind\",\n    t1: \"[waɪnd]\",\n    v2: \"wound\",\n    t2: \"[waund]\",\n    v3: \"wound\",\n    t3: \"[waund]\",\n    meaning: \"заводить (механизм)\"\n  },\n  {\n    v1: \"withdraw\",\n    t1: \"[wɪðˈdrɔː]\",\n    v2: \"withdrew\",\n    t2: \"[wɪðˈdruː]\",\n    v3: \"withdrawn\",\n    t3: \"[wɪðˈdrɔːn]\",\n    meaning: \"взять назад, отозвать\"\n  },\n  {\n    v1: \"withstand\",\n    t1: \"[wɪðˈstænd]\",\n    v2: \"withstood\",\n    t2: \"[wɪðˈstʊd]\",\n    v3: \"withstood\",\n    t3: \"[wɪðˈstʊd]\",\n    meaning: \"противиться\"\n  },\n  {\n    v1: \"write\",\n    t1: \"[ˈraɪt]\",\n    v2: \"wrote\",\n    t2: \"[rəʊt]\",\n    v3: \"written\",\n    t3: \"[ˈrɪtən]\",\n    meaning: \"писать\"\n  }\n];\n","import React, {useState, useEffect} from \"react\";\nimport {makeStyles} from '@material-ui/core/styles';\n// components\nimport Page from \"../../components/Page\";\nimport {irregularVerbs} from \"../../data\";\n// ui components\nimport Grid from '@material-ui/core/Grid';\nimport Paper from '@material-ui/core/Paper';\nimport Table from '@material-ui/core/Table';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableRow from '@material-ui/core/TableRow';\nimport TableCell from '@material-ui/core/TableCell';\nimport FormControl from '@material-ui/core/FormControl';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport Card from '@material-ui/core/Card';\nimport CardContent from '@material-ui/core/CardContent';\nimport Switch from '@material-ui/core/Switch';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport Input from '@material-ui/core/Input';\n\nconst useStyles = makeStyles(theme => ({\n    helper: {\n        marginBottom: theme.spacing(3),\n    },\n    column: {\n        color: 'white',\n        backgroundColor: theme.palette.primary.main,\n    },\n    t: {\n        color: 'gray'\n    }\n}));\n\n\nexport default () => {\n    const classes = useStyles();\n    const [verbs, setVerbs] = useState(irregularVerbs);\n    const [searchBy, setSearchBy] = useState('');\n    const [withExtended, setWithExtended] = useState(false);\n    const [showTranscription, setShowTranscription] = useState(true);\n\n    useEffect(() => {\n        let words = irregularVerbs;\n        if (!withExtended) {\n            words = words.filter(({extended}) => !extended);\n        }\n        if (searchBy) {\n            words = words.filter(({v1, v2, v3, meaning}) => v1.includes(searchBy) || v2.includes(searchBy) || v3.includes(searchBy) || meaning.includes(searchBy));\n        }\n        setVerbs(words)\n    }, [withExtended, searchBy]);\n\n    return (\n        <Page title=\"Irregular Verbs\">\n            <Grid container justify=\"center\" alignItems=\"center\">\n                <Card className={classes.helper}>\n                    <CardContent>\n                        <FormControl fullWidth>\n                            <FormControlLabel\n                                control={\n                                    <Switch\n                                        checked={withExtended}\n                                        onChange={() => {\n                                            setWithExtended(!withExtended)\n                                        }}\n                                        value=\"extended\"\n                                        color=\"primary\"\n                                    />\n                                }\n                                label=\"With Extended\"\n                            />\n                        </FormControl>\n                        <FormControl fullWidth>\n                            <FormControlLabel\n                                control={\n                                    <Switch\n                                        checked={showTranscription}\n                                        onChange={() => {\n                                            setShowTranscription(!showTranscription)\n                                        }}\n                                        value=\"extended\"\n                                        color=\"primary\"\n                                    />\n                                }\n                                label=\"Show Transcription\"\n                            />\n                        </FormControl>\n                        <FormControl fullWidth>\n                            <InputLabel htmlFor=\"search\">search</InputLabel>\n                            <Input id=\"search\" type=\"search\" onChange={(event) => {\n                                const {target: {value} = {value: ''}} = event;\n                                setSearchBy(value)\n                            }}/>\n                        </FormControl>\n                    </CardContent>\n                </Card>\n            </Grid>\n            <Grid container justify=\"center\" alignItems=\"center\">\n                <Grid items={8}>\n                    <Paper>\n                        <Table>\n                            <TableHead>\n                                <TableRow>\n                                    <TableCell className={classes.column}>#</TableCell>\n                                    <TableCell className={classes.column}>Form 1</TableCell>\n                                    <TableCell className={classes.column}>Form 2</TableCell>\n                                    <TableCell className={classes.column}>Form 3</TableCell>\n                                    <TableCell className={classes.column}>Meaning</TableCell>\n                                </TableRow>\n                            </TableHead>\n                            <TableBody>\n                                {verbs.map(\n                                    ({id, group, v1, t1, v2, t2, v3, t3, meaning}, index) => (\n                                        <TableRow key={id} hover>\n                                            <TableCell>{index + 1}</TableCell>\n                                            <TableCell>\n                                                <span>{v1}</span>\n                                                {showTranscription && <span className={classes.t}> {t1}</span>}\n                                            </TableCell>\n                                            <TableCell>\n                                                <span>{v2}</span>\n                                                {showTranscription && <span className={classes.t}> {t2}</span>}\n                                            </TableCell>\n                                            <TableCell>\n                                                <span>{v3}</span>\n                                                {showTranscription && <span className={classes.t}> {t3}</span>}\n                                            </TableCell>\n                                            <TableCell>{meaning}</TableCell>\n                                        </TableRow>\n                                    )\n                                )}\n                            </TableBody>\n                        </Table>\n                    </Paper>\n                </Grid>\n            </Grid>\n        </Page>\n    );\n};\n","import React, {useState, useRef, useEffect} from 'react';\nimport {ErrorMessage, Field} from \"formik\";\n// ui components\nimport FormControl from '@material-ui/core/FormControl';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport OutlinedInput from '@material-ui/core/OutlinedInput';\nimport FormHelperText from \"@material-ui/core/FormHelperText\";\n\nexport default ({errors, touched, name, label, fullWidth, className}) => {\n    const labelRef = useRef(null);\n    const [labelWidth, setLabelWidth] = useState(0);\n    useEffect(() => {\n        setLabelWidth(labelRef.current.offsetWidth)\n    }, [labelRef]);\n    return (\n        <FormControl fullWidth={fullWidth}\n                     variant=\"outlined\"\n                     error={errors[name] && touched[name]}\n                     className={className}>\n            <InputLabel htmlFor={name} ref={labelRef}>{label}</InputLabel>\n            <Field id={name} name={name}\n                   render={({field}) => (\n                       <OutlinedInput {...field} labelWidth={labelWidth}/>\n                   )}/>\n            <ErrorMessage name={name} component={FormHelperText}\n                          error={errors.numberOfCards && touched.numberOfCards}/>\n        </FormControl>\n    );\n};","import React, {useState} from \"react\";\n// libs\nimport {Formik, Form} from \"formik\";\nimport * as Yup from \"yup\";\nimport {makeStyles} from '@material-ui/core/styles';\n// ui components\nimport Card from '@material-ui/core/Card';\nimport CardActions from '@material-ui/core/CardActions';\nimport CardContent from '@material-ui/core/CardContent';\nimport Typography from '@material-ui/core/Typography';\nimport Button from '@material-ui/core/Button';\nimport OutlinedInput from '../../../../components/OutlinedInput'\n\nconst defaultMessage = 'use only alphabet of english';\n\nYup.addMethod(Yup.string, \"isEnglish\", function (args) {\n    const {message} = args;\n    return Yup.mixed().test(`isEnglish`, message, function (value) {\n        const {path, createError} = this;\n        const {message = defaultMessage} = args;\n        return value ? value.match(/^[A-Za-z]*$/) || createError({path, message}) : true;\n    })\n});\n\nconst useStyles = makeStyles(theme => ({\n    textField: {\n        marginLeft: theme.spacing(1),\n        marginRight: theme.spacing(1),\n    },\n    message: {\n        marginLeft: theme.spacing(1),\n        marginRight: theme.spacing(1),\n        '&.error': {\n            color: theme.palette.secondary.main\n        },\n        '&.success': {\n            color: theme.palette.primary.main\n        }\n    },\n}));\n\nconst validationSchema = Yup.object().shape({\n    v1: Yup.string().isEnglish('').required(),\n    v2: Yup.string().isEnglish('').required(),\n    v3: Yup.string().isEnglish('').required()\n});\n\nconst initValues = {\n    v1: \"\",\n    v2: \"\",\n    v3: \"\",\n};\n\nconst initAttempt = {\n    message: '',\n    errors: {},\n    success: {}\n};\n\nconst fields = Object.keys(initValues);\n\nconst CheckVerbForm = ({word, handleOnSubmit, stop}) => {\n    const {meaning} = word;\n    const [attempt, setAttempt] = useState(initAttempt);\n    const classes = useStyles();\n    return (\n        <Formik\n            initialValues={initValues}\n            validationSchema={validationSchema}\n            onSubmit={(values, {validateForm, setFieldError, setErrors, resetForm}) => {\n                setAttempt(initAttempt);\n                const errorsAfterCheck = {};\n                const newAttempt = {\n                    errors: {},\n                    success: {},\n                    message: ''\n                };\n\n\n                Object.keys(values).forEach(key => {\n                    if (word[key] !== values[key]) {\n                        errorsAfterCheck[key] = 'Wrong verb form';\n                        newAttempt.errors[key] = true\n                    } else {\n                        newAttempt.success[key] = true\n                    }\n                });\n\n                const newErrors = Object.keys(errorsAfterCheck).length > 0;\n\n                newAttempt.message = newErrors ? \"You`re wrong: please, check highlighted fields\" : \"You`re right!\";\n                setAttempt(newAttempt);\n                if (newErrors) {\n                    setErrors(errorsAfterCheck);\n                } else {\n                    setTimeout(() => {\n                        setAttempt(initAttempt);\n                        resetForm();\n                        handleOnSubmit()\n                    }, 800)\n                }\n            }}\n        >\n            {({errors, touched}) => (\n                <Form>\n                    <Card>\n                        <CardContent>\n                            <Typography gutterBottom variant=\"subtitle1\"\n                                        className={`${classes.message} ${Object.keys(attempt.errors).length > 0 ? 'error' : 'success'}`}>\n                                {attempt.message}\n                            </Typography>\n                            <Typography gutterBottom variant=\"h4\" component=\"h2\" color=\"primary\">\n                                {meaning}\n                            </Typography>\n                            {fields.map((name, index) => (\n                                <OutlinedInput key={name} errors={errors} touched={touched} name={name}\n                                               label={`V${index + 1}`}\n                                               className={classes.textField}/>\n                            ))}\n                        </CardContent>\n                        <CardActions>\n                            <Button variant=\"contained\" color=\"primary\" type=\"submit\">Next</Button>\n                            <Button color=\"secondary\" onClick={stop} >Stop Training</Button>\n                        </CardActions>\n                    </Card>\n                </Form>\n            )}\n\n        </Formik>\n    );\n};\n\nCheckVerbForm.defaultProps = {\n    word: {\n        meaning: ''\n    },\n    handleOnSubmit: () => {\n    },\n    stop: () => {\n    }\n};\n\nexport default CheckVerbForm;\n","import React from 'react';\nimport {Formik, Form} from \"formik\";\n// ui components\nimport Card from '@material-ui/core/Card';\nimport CardActions from '@material-ui/core/CardActions';\nimport CardContent from '@material-ui/core/CardContent';\nimport Typography from '@material-ui/core/Typography';\nimport FormControl from '@material-ui/core/FormControl';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport Switch from '@material-ui/core/Switch';\nimport Button from '@material-ui/core/Button';\nimport OutlinedInput from '../../../../components/OutlinedInput'\n\n\nconst FormSettings = ({settings, handleSubmit, setSettings, maxNumberOfCards = 0}) => {\n    return (\n        <Formik\n            initialValues={settings}\n            validate={(values) => {\n                const errors = {};\n                const count = values.numberOfCards;\n                if (!count) {\n                    errors.numberOfCards = 'is required'\n                } else if (count && !count.match(/^[0-9]*$/)) {\n                    errors.numberOfCards = 'accept only numbers'\n                } else if (count && count <= 0) {\n                    errors.numberOfCards = `minimum number is 1`\n                } else if (count && count > maxNumberOfCards) {\n                    errors.numberOfCards = `maximum number is ${maxNumberOfCards}`\n                }\n                return errors\n            }}\n            onSubmit={(values) => {\n                values.numberOfCards = Number(values.numberOfCards);\n                handleSubmit(values)\n            }}\n        >\n            {({errors, touched}) => (\n                <Form>\n                    <Card>\n                        <CardContent>\n                            <Typography gutterBottom variant=\"h5\" component=\"h2\">\n                                Setup settings\n                            </Typography>\n                            <FormControl fullWidth>\n                                <FormControlLabel\n                                    control={\n                                        <Switch\n                                            checked={settings.withExtended}\n                                            onChange={({target: {checked: withExtended}}) => {\n                                                setSettings({...settings, withExtended})\n                                            }}\n                                            value=\"withExtended\"\n                                            color=\"primary\"\n                                        />\n                                    }\n                                    label=\"With Extended\"\n                                />\n                            </FormControl>\n\n                            <FormControl fullWidth>\n                                <FormControlLabel\n                                    control={\n                                        <Switch\n                                            checked={settings.oneAttempt}\n                                            onChange={({target: {checked: oneAttempt}}) => {\n                                                setSettings({...settings, oneAttempt})\n                                            }}\n                                            value=\"oneAttempt\"\n                                            color=\"primary\"\n                                        />\n                                    }\n                                    label=\"One Attempt\"\n                                />\n                            </FormControl>\n                            <OutlinedInput errors={errors} touched={touched} name=\"numberOfCards\"\n                                           label=\"Number of Cards\"\n                                           fullWidth/>\n                        </CardContent>\n                        <CardActions>\n                            <Button variant=\"contained\" color=\"primary\" type=\"submit\">start</Button>\n                        </CardActions>\n                    </Card>\n\n\n                </Form>\n            )}\n        </Formik>\n\n    );\n};\n\nexport default FormSettings;","import React, {useState, useEffect} from \"react\";\n//components\nimport Page from \"../../components/Page\";\nimport CheckVerbForm from \"./components/CheckVerbForm\";\nimport FormSettings from './components/FormSettings'\n// ui components\nimport Grid from '@material-ui/core/Grid';\nimport Card from '@material-ui/core/Card';\nimport CardActions from '@material-ui/core/CardActions';\nimport CardContent from '@material-ui/core/CardContent';\nimport Typography from '@material-ui/core/Typography';\nimport FormControl from '@material-ui/core/FormControl';\nimport ButtonGroup from '@material-ui/core/ButtonGroup';\nimport Button from '@material-ui/core/Button';\n\n// others\nimport {irregularVerbs} from \"../../data\";\nimport {getRandom} from \"./helpers\";\n\n\nconst defaultSettings = {\n    withExtended: true,\n    oneAttempt: false,\n    numberOfCards: 10,\n};\n\n// statuses\nconst START = 'start';\nconst PROGRESS = 'progress';\nconst FINISH = 'finish';\n\nexport default () => {\n    const [status, setStatus] = useState(START);\n    const [settings, setSettings] = useState(defaultSettings);\n    const [cards, setCards] = useState([]);\n    const [words, setWords] = useState(irregularVerbs);\n    const [step, setStep] = useState(0);\n\n    const {withExtended, numberOfCards} = settings;\n\n    useEffect(() => {\n        setWords(withExtended ? irregularVerbs : irregularVerbs.filter(({extended}) => !extended))\n    }, [withExtended]);\n\n    const start = (numberOfCards) => {\n        setCards(getRandom(words, numberOfCards));\n        setStep(0);\n        setStatus(PROGRESS);\n    };\n\n    const finish = () => {\n        setStatus(FINISH);\n    };\n\n    const next = () => {\n        const nextStep = step + 1;\n        setStep(nextStep);\n        if (nextStep === numberOfCards) {\n            setStatus(FINISH);\n        }\n    };\n\n    const ProgressBlock = (\n        <div>\n            <h6>{step + 1}/{numberOfCards}</h6>\n            <CheckVerbForm\n                handleOnSubmit={() => {\n                    next()\n                }}\n                word={cards[step]}\n                stop={finish}/>\n        </div>\n    );\n\n    const FinishBlock = (\n        <Card>\n            <CardContent>\n                <Typography gutterBottom variant=\"h5\" component=\"h2\">\n                    Your results\n                </Typography>\n            </CardContent>\n            <CardActions>\n                <FormControl>\n                    <ButtonGroup variant=\"contained\" color=\"primary\">\n                        <Button\n                            onClick={() => {\n                                setStatus(START);\n                            }}>Repeat\n                        </Button>\n                        <Button\n                            onClick={() => {\n                                setStatus(START);\n                                setSettings(defaultSettings);\n                            }}>Go to Settings\n                        </Button>\n                    </ButtonGroup>\n                </FormControl>\n            </CardActions>\n\n        </Card>\n    );\n\n    return (\n        <Page title=\"Training\">\n            <Grid container justify=\"center\" alignItems=\"center\">\n                {status === START && <FormSettings\n                    settings={settings}\n                    maxNumberOfCards={words.length}\n                    setSettings={(newSettings) => {\n                        setSettings(newSettings)\n                    }}\n                    handleSubmit={(values) => {\n                        setSettings(values);\n                        start(values.numberOfCards);\n\n                    }}/>}\n                {status === PROGRESS && ProgressBlock}\n                {status === FINISH && FinishBlock}\n            </Grid>\n        </Page>\n    );\n};\n","import React from \"react\";\nimport \"./App.css\";\nimport {Route, Link} from \"react-router-dom\";\nimport {makeStyles} from '@material-ui/core/styles';\n// components\nimport HomePage from \"./pages/HomePage\";\nimport IrregularVerbs from \"./pages/IrregularVerbs\";\nimport Training from \"./pages/Training\";\n// ui components\nimport Paper from '@material-ui/core/Paper';\nimport Button from '@material-ui/core/Button';\n\nconst useStyles = makeStyles(theme => ({\n    link: {\n        display: 'inline-block',\n        padding: theme.spacing(1),\n\n    },\n}));\n\n\nconst routeComponents = [\n    {\n        path: \"/\",\n        component: HomePage\n    },\n    {\n        path: \"/irregular-verbs\",\n        component: IrregularVerbs,\n        navName: \"Irregular Verb\"\n    },\n    {\n        path: \"/training\",\n        component: Training,\n        navName: \"Training\"\n    }\n];\n\nfunction App() {\n    const classes = useStyles();\n    return (\n        <div className=\"App\">\n            <header>\n                <Paper>\n                    <nav>\n                        {routeComponents.map(\n                            ({navName, path}) =>\n                                navName ? (\n                                    <Link key={path} to={path} className={classes.link}>\n                                        <Button>\n                                            {navName}\n                                        </Button>\n                                    </Link>\n                                ) : null\n                        )}\n                    </nav>\n                </Paper>\n            </header>\n            <main>\n                {routeComponents.map(({path, component}) => (\n                    <Route key={path} path={path} exact component={component}/>\n                ))}\n            </main>\n        </div>\n    );\n}\n\nexport default App;\n","import React from \"react\";\n// components\nimport Page from \"../../components/Page\";\n\nexport default () => {\n  return <Page title=\"HomePage\" />;\n};\n","export const getRandom = (itemsArray, numberOfItems) => {\n    let result = [];\n    if (Array.isArray(itemsArray) && numberOfItems <= itemsArray.length) {\n        do {\n            const randomIndex = Math.floor(Math.random() * itemsArray.length);\n            const item = itemsArray[randomIndex];\n            if (!result.includes(item)) {\n                result.push(item);\n            }\n        } while (result.length < numberOfItems)\n\n    }\n    return result\n};","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport {HashRouter as Router} from \"react-router-dom\";\nimport {createMuiTheme, MuiThemeProvider} from '@material-ui/core/styles';\nimport blue from '@material-ui/core/colors/blue';\nimport red from '@material-ui/core/colors/red';\nimport green from '@material-ui/core/colors/green';\n\nconst theme = createMuiTheme({\n    palette: {\n        primary: blue,\n        secondary: red,\n        success: green // TODO how to add custom variant?\n    },\n});\n\nReactDOM.render(\n    <Router>\n        <MuiThemeProvider theme={theme}>\n            <App/>\n        </MuiThemeProvider>\n    </Router>,\n    document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}